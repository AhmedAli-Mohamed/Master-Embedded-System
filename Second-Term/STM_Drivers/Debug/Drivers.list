
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001590  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080016c0  080016c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001728  08001728  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001728  08001728  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001728  08001728  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000064  08001794  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001794  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006725  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fdf  00000000  00000000  000267b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000010e2  00000000  00000000  00027791  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002b0  00000000  00000000  00028878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000228  00000000  00000000  00028b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001909  00000000  00000000  00028d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003251  00000000  00000000  0002a659  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b89d  00000000  00000000  0002d8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00039147  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c14  00000000  00000000  000391c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	080016a8 	.word	0x080016a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	080016a8 	.word	0x080016a8

08000170 <KEYPAD_INIT>:
 */

#include "KEYPAD.h"

void KEYPAD_INIT()
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b08b      	sub	sp, #44	; 0x2c
 8000174:	af00      	add	r7, sp, #0
	int KP_ROW[]={R0,R1,R2,R3};
 8000176:	4b29      	ldr	r3, [pc, #164]	; (800021c <KEYPAD_INIT+0xac>)
 8000178:	f107 0414 	add.w	r4, r7, #20
 800017c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800017e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int KP_COL[]={C0,C1,C2,C3};
 8000182:	4b27      	ldr	r3, [pc, #156]	; (8000220 <KEYPAD_INIT+0xb0>)
 8000184:	1d3c      	adds	r4, r7, #4
 8000186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t i;
	GPIO_PINCONFIG pinconf;
	for(i=0 ; i<=3 ; i++)
 800018c:	2300      	movs	r3, #0
 800018e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000192:	e017      	b.n	80001c4 <KEYPAD_INIT+0x54>
	{
		pinconf.Pin_Number = KP_ROW[i];
 8000194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800019e:	4413      	add	r3, r2
 80001a0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	803b      	strh	r3, [r7, #0]
		pinconf.MODE = GPIO_MODE_OUTPUT_PP;
 80001a8:	2304      	movs	r3, #4
 80001aa:	70bb      	strb	r3, [r7, #2]
		pinconf.Speed = GPIO_SPEED_10M;
 80001ac:	2301      	movs	r3, #1
 80001ae:	70fb      	strb	r3, [r7, #3]
		MCAL_GPIO_INIT(KEYPAD_DATAPORT , &pinconf);
 80001b0:	463b      	mov	r3, r7
 80001b2:	4619      	mov	r1, r3
 80001b4:	481b      	ldr	r0, [pc, #108]	; (8000224 <KEYPAD_INIT+0xb4>)
 80001b6:	f000 fd73 	bl	8000ca0 <MCAL_GPIO_INIT>
	for(i=0 ; i<=3 ; i++)
 80001ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001be:	3301      	adds	r3, #1
 80001c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80001c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001c8:	2b03      	cmp	r3, #3
 80001ca:	d9e3      	bls.n	8000194 <KEYPAD_INIT+0x24>
	}
	for(i=0 ; i<=3 ; i++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80001d2:	e015      	b.n	8000200 <KEYPAD_INIT+0x90>
	{
		pinconf.Pin_Number = KP_COL[i];
 80001d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80001de:	4413      	add	r3, r2
 80001e0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	803b      	strh	r3, [r7, #0]
		pinconf.MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	2304      	movs	r3, #4
 80001ea:	70bb      	strb	r3, [r7, #2]
		MCAL_GPIO_INIT(KEYPAD_DATAPORT ,& pinconf);
 80001ec:	463b      	mov	r3, r7
 80001ee:	4619      	mov	r1, r3
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <KEYPAD_INIT+0xb4>)
 80001f2:	f000 fd55 	bl	8000ca0 <MCAL_GPIO_INIT>
	for(i=0 ; i<=3 ; i++)
 80001f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001fa:	3301      	adds	r3, #1
 80001fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000204:	2b03      	cmp	r3, #3
 8000206:	d9e5      	bls.n	80001d4 <KEYPAD_INIT+0x64>
	}
	MCAL_GPIO_Writeport(GPIOB, 0x1ff);
 8000208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <KEYPAD_INIT+0xb4>)
 800020e:	f000 fe00 	bl	8000e12 <MCAL_GPIO_Writeport>

}
 8000212:	bf00      	nop
 8000214:	372c      	adds	r7, #44	; 0x2c
 8000216:	46bd      	mov	sp, r7
 8000218:	bd90      	pop	{r4, r7, pc}
 800021a:	bf00      	nop
 800021c:	080016c0 	.word	0x080016c0
 8000220:	080016d0 	.word	0x080016d0
 8000224:	40010c00 	.word	0x40010c00

08000228 <KEYPAD_READ>:

uint8_t KEYPAD_READ()
{
 8000228:	b590      	push	{r4, r7, lr}
 800022a:	b08f      	sub	sp, #60	; 0x3c
 800022c:	af00      	add	r7, sp, #0
	int KP_ROW[]={R0,R1,R2,R3};
 800022e:	4b41      	ldr	r3, [pc, #260]	; (8000334 <KEYPAD_READ+0x10c>)
 8000230:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int KP_COL[]={C0,C1,C2,C3};
 800023a:	4b3f      	ldr	r3, [pc, #252]	; (8000338 <KEYPAD_READ+0x110>)
 800023c:	f107 0414 	add.w	r4, r7, #20
 8000240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 8000246:	4b3d      	ldr	r3, [pc, #244]	; (800033c <KEYPAD_READ+0x114>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t row,col,return_val = 0xff;
 8000250:	23ff      	movs	r3, #255	; 0xff
 8000252:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	for(row = 0 ;row <= 3 ; row++)
 8000256:	2300      	movs	r3, #0
 8000258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800025c:	e05d      	b.n	800031a <KEYPAD_READ+0xf2>
	{
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , KP_ROW[0] , 1);
 800025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2201      	movs	r2, #1
 8000264:	4619      	mov	r1, r3
 8000266:	4836      	ldr	r0, [pc, #216]	; (8000340 <KEYPAD_READ+0x118>)
 8000268:	f000 fdaf 	bl	8000dca <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , KP_ROW[1] , 1);
 800026c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2201      	movs	r2, #1
 8000272:	4619      	mov	r1, r3
 8000274:	4832      	ldr	r0, [pc, #200]	; (8000340 <KEYPAD_READ+0x118>)
 8000276:	f000 fda8 	bl	8000dca <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , KP_ROW[2] , 1);
 800027a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	482f      	ldr	r0, [pc, #188]	; (8000340 <KEYPAD_READ+0x118>)
 8000284:	f000 fda1 	bl	8000dca <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , KP_ROW[3] , 1);
 8000288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2201      	movs	r2, #1
 800028e:	4619      	mov	r1, r3
 8000290:	482b      	ldr	r0, [pc, #172]	; (8000340 <KEYPAD_READ+0x118>)
 8000292:	f000 fd9a 	bl	8000dca <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , KP_ROW[row] , 0);
 8000296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80002a0:	4413      	add	r3, r2
 80002a2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2200      	movs	r2, #0
 80002aa:	4619      	mov	r1, r3
 80002ac:	4824      	ldr	r0, [pc, #144]	; (8000340 <KEYPAD_READ+0x118>)
 80002ae:	f000 fd8c 	bl	8000dca <MCAL_GPIO_Writepin>

		for(col =0 ; col <= 3 ; col++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80002b8:	e022      	b.n	8000300 <KEYPAD_READ+0xd8>
		{

			if(MCAL_GPIO_Readpin(KEYPAD_DATAPORT , KP_COL[col]) == 0)
 80002ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80002c4:	4413      	add	r3, r2
 80002c6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	481c      	ldr	r0, [pc, #112]	; (8000340 <KEYPAD_READ+0x118>)
 80002d0:	f000 fd64 	bl	8000d9c <MCAL_GPIO_Readpin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d10d      	bne.n	80002f6 <KEYPAD_READ+0xce>
			{
				return_val = arr[row][col];
 80002da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80002de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80002e8:	440a      	add	r2, r1
 80002ea:	4413      	add	r3, r2
 80002ec:	3b34      	subs	r3, #52	; 0x34
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 80002f4:	e008      	b.n	8000308 <KEYPAD_READ+0xe0>
		for(col =0 ; col <= 3 ; col++)
 80002f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80002fa:	3301      	adds	r3, #1
 80002fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000300:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000304:	2b03      	cmp	r3, #3
 8000306:	d9d8      	bls.n	80002ba <KEYPAD_READ+0x92>
			}
		}
		if(return_val != 0xff)
 8000308:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800030c:	2bff      	cmp	r3, #255	; 0xff
 800030e:	d109      	bne.n	8000324 <KEYPAD_READ+0xfc>
	for(row = 0 ;row <= 3 ; row++)
 8000310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000314:	3301      	adds	r3, #1
 8000316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800031a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800031e:	2b03      	cmp	r3, #3
 8000320:	d99d      	bls.n	800025e <KEYPAD_READ+0x36>
 8000322:	e000      	b.n	8000326 <KEYPAD_READ+0xfe>
		break;
 8000324:	bf00      	nop

	}

	return return_val;
 8000326:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
}
 800032a:	4618      	mov	r0, r3
 800032c:	373c      	adds	r7, #60	; 0x3c
 800032e:	46bd      	mov	sp, r7
 8000330:	bd90      	pop	{r4, r7, pc}
 8000332:	bf00      	nop
 8000334:	080016c0 	.word	0x080016c0
 8000338:	080016d0 	.word	0x080016d0
 800033c:	080016e0 	.word	0x080016e0
 8000340:	40010c00 	.word	0x40010c00

08000344 <_delay_ms>:
 */
#include "LCD.h"
#include "GPIO.h"
#include<stdio.h>
void _delay_ms(uint32_t x)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0 ; i < 255 * x ; i++);
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e002      	b.n	8000358 <_delay_ms+0x14>
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3301      	adds	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4613      	mov	r3, r2
 800035c:	021b      	lsls	r3, r3, #8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	429a      	cmp	r2, r3
 8000364:	d3f5      	bcc.n	8000352 <_delay_ms+0xe>
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <ENABLE_sig>:

// counter to handle printing string on lcd
uint8_t counter;

void ENABLE_sig()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_EN , 1 );
 8000374:	2201      	movs	r2, #1
 8000376:	210a      	movs	r1, #10
 8000378:	4807      	ldr	r0, [pc, #28]	; (8000398 <ENABLE_sig+0x28>)
 800037a:	f000 fd26 	bl	8000dca <MCAL_GPIO_Writepin>
	_delay_ms(20);
 800037e:	2014      	movs	r0, #20
 8000380:	f7ff ffe0 	bl	8000344 <_delay_ms>
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_EN , 0 );
 8000384:	2200      	movs	r2, #0
 8000386:	210a      	movs	r1, #10
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <ENABLE_sig+0x28>)
 800038a:	f000 fd1e 	bl	8000dca <MCAL_GPIO_Writepin>
	_delay_ms(20);
 800038e:	2014      	movs	r0, #20
 8000390:	f7ff ffd8 	bl	8000344 <_delay_ms>

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40010800 	.word	0x40010800

0800039c <LCD_INIT>:
void LCD_INIT(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	uint8_t i ;
	// initialize control pins
	GPIO_PINCONFIG pinconf;
	pinconf.Pin_Number = LCD_EN ;
 80003a2:	230a      	movs	r3, #10
 80003a4:	803b      	strh	r3, [r7, #0]
	pinconf.MODE = GPIO_MODE_OUTPUT_PP;
 80003a6:	2304      	movs	r3, #4
 80003a8:	70bb      	strb	r3, [r7, #2]
	pinconf.Speed = GPIO_SPEED_10M;
 80003aa:	2301      	movs	r3, #1
 80003ac:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(LCD_CTRLPORT ,& pinconf);
 80003ae:	463b      	mov	r3, r7
 80003b0:	4619      	mov	r1, r3
 80003b2:	481e      	ldr	r0, [pc, #120]	; (800042c <LCD_INIT+0x90>)
 80003b4:	f000 fc74 	bl	8000ca0 <MCAL_GPIO_INIT>
	pinconf.Pin_Number = LCD_RS ;
 80003b8:	2308      	movs	r3, #8
 80003ba:	803b      	strh	r3, [r7, #0]
	pinconf.MODE = GPIO_MODE_OUTPUT_PP;
 80003bc:	2304      	movs	r3, #4
 80003be:	70bb      	strb	r3, [r7, #2]
	pinconf.Speed = GPIO_SPEED_10M;
 80003c0:	2301      	movs	r3, #1
 80003c2:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(LCD_CTRLPORT , &pinconf);
 80003c4:	463b      	mov	r3, r7
 80003c6:	4619      	mov	r1, r3
 80003c8:	4818      	ldr	r0, [pc, #96]	; (800042c <LCD_INIT+0x90>)
 80003ca:	f000 fc69 	bl	8000ca0 <MCAL_GPIO_INIT>
	pinconf.Pin_Number = LCD_RW ;
 80003ce:	2309      	movs	r3, #9
 80003d0:	803b      	strh	r3, [r7, #0]
	pinconf.MODE = GPIO_MODE_OUTPUT_PP;
 80003d2:	2304      	movs	r3, #4
 80003d4:	70bb      	strb	r3, [r7, #2]
	pinconf.Speed = GPIO_SPEED_10M;
 80003d6:	2301      	movs	r3, #1
 80003d8:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(LCD_CTRLPORT ,& pinconf);
 80003da:	463b      	mov	r3, r7
 80003dc:	4619      	mov	r1, r3
 80003de:	4813      	ldr	r0, [pc, #76]	; (800042c <LCD_INIT+0x90>)
 80003e0:	f000 fc5e 	bl	8000ca0 <MCAL_GPIO_INIT>

#if defined EIGHTBIT_MODE
	for(i=0 ; i<=7 ; i++)
 80003e4:	2300      	movs	r3, #0
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	e00e      	b.n	8000408 <LCD_INIT+0x6c>
	{
		pinconf.Pin_Number = i;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	803b      	strh	r3, [r7, #0]
		pinconf.MODE = GPIO_MODE_OUTPUT_PP;
 80003f0:	2304      	movs	r3, #4
 80003f2:	70bb      	strb	r3, [r7, #2]
		pinconf.Speed = GPIO_SPEED_10M;
 80003f4:	2301      	movs	r3, #1
 80003f6:	70fb      	strb	r3, [r7, #3]
		MCAL_GPIO_INIT(LCD_DATAPORT , &pinconf);
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <LCD_INIT+0x90>)
 80003fe:	f000 fc4f 	bl	8000ca0 <MCAL_GPIO_INIT>
	for(i=0 ; i<=7 ; i++)
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	3301      	adds	r3, #1
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b07      	cmp	r3, #7
 800040c:	d9ed      	bls.n	80003ea <LCD_INIT+0x4e>

	}

	LCD_SEND_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800040e:	2038      	movs	r0, #56	; 0x38
 8000410:	f000 f80e 	bl	8000430 <LCD_SEND_COMMAND>
	LCD_SEND_COMMAND(LCD_DISP_ON_CURSOR);
 8000414:	200e      	movs	r0, #14
 8000416:	f000 f80b 	bl	8000430 <LCD_SEND_COMMAND>
	LCD_CLEAR_SCREEN();
 800041a:	f000 f880 	bl	800051e <LCD_CLEAR_SCREEN>
	LCD_SEND_COMMAND(LCD_ENTRY_MODE);
 800041e:	2006      	movs	r0, #6
 8000420:	f000 f806 	bl	8000430 <LCD_SEND_COMMAND>


#endif


}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010800 	.word	0x40010800

08000430 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(uint8_t comm)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RS , 0 );
 800043a:	2200      	movs	r2, #0
 800043c:	2108      	movs	r1, #8
 800043e:	480e      	ldr	r0, [pc, #56]	; (8000478 <LCD_SEND_COMMAND+0x48>)
 8000440:	f000 fcc3 	bl	8000dca <MCAL_GPIO_Writepin>
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RW , 0 );
 8000444:	2200      	movs	r2, #0
 8000446:	2109      	movs	r1, #9
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <LCD_SEND_COMMAND+0x48>)
 800044a:	f000 fcbe 	bl	8000dca <MCAL_GPIO_Writepin>


#if defined EIGHTBIT_MODE
	LCD_DATAPORT->ODR &= ~(0xff);
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <LCD_SEND_COMMAND+0x48>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	4a09      	ldr	r2, [pc, #36]	; (8000478 <LCD_SEND_COMMAND+0x48>)
 8000454:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000458:	60d3      	str	r3, [r2, #12]
	LCD_DATAPORT->ODR |= comm;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <LCD_SEND_COMMAND+0x48>)
 800045c:	68da      	ldr	r2, [r3, #12]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	4905      	ldr	r1, [pc, #20]	; (8000478 <LCD_SEND_COMMAND+0x48>)
 8000462:	4313      	orrs	r3, r2
 8000464:	60cb      	str	r3, [r1, #12]
	ENABLE_sig();
 8000466:	f7ff ff83 	bl	8000370 <ENABLE_sig>
	_delay_ms(1);
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff ff6a 	bl	8000344 <_delay_ms>
	_delay_ms(1);
	MCAL_GPIO_WriteNibble(LCD_DATAPORT , comm , PIN_POS);
	ENABLE_sig();
	_delay_ms(1);
#endif
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010800 	.word	0x40010800

0800047c <LCD_SEND_CHAR>:

void LCD_SEND_CHAR(uint8_t data)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RS , 1 );
 8000486:	2201      	movs	r2, #1
 8000488:	2108      	movs	r1, #8
 800048a:	4818      	ldr	r0, [pc, #96]	; (80004ec <LCD_SEND_CHAR+0x70>)
 800048c:	f000 fc9d 	bl	8000dca <MCAL_GPIO_Writepin>
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RW , 0 );
 8000490:	2200      	movs	r2, #0
 8000492:	2109      	movs	r1, #9
 8000494:	4815      	ldr	r0, [pc, #84]	; (80004ec <LCD_SEND_CHAR+0x70>)
 8000496:	f000 fc98 	bl	8000dca <MCAL_GPIO_Writepin>
#if defined EIGHTBIT_MODE
	LCD_DATAPORT->ODR &= ~(0xff);
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <LCD_SEND_CHAR+0x70>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <LCD_SEND_CHAR+0x70>)
 80004a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004a4:	60d3      	str	r3, [r2, #12]
	LCD_DATAPORT->ODR |= data;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <LCD_SEND_CHAR+0x70>)
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	490f      	ldr	r1, [pc, #60]	; (80004ec <LCD_SEND_CHAR+0x70>)
 80004ae:	4313      	orrs	r3, r2
 80004b0:	60cb      	str	r3, [r1, #12]
	ENABLE_sig();
 80004b2:	f7ff ff5d 	bl	8000370 <ENABLE_sig>
	ENABLE_sig();
	MCAL_GPIO_WriteNibble(LCD_DATAPORT , data , PIN_POS);
	ENABLE_sig();

#endif
	counter ++;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <LCD_SEND_CHAR+0x74>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <LCD_SEND_CHAR+0x74>)
 80004c0:	701a      	strb	r2, [r3, #0]
	if (counter == 16)
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <LCD_SEND_CHAR+0x74>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b10      	cmp	r3, #16
 80004c8:	d103      	bne.n	80004d2 <LCD_SEND_CHAR+0x56>
	{
		LCD_MOVE_CURSOR(2,1);
 80004ca:	2101      	movs	r1, #1
 80004cc:	2002      	movs	r0, #2
 80004ce:	f000 f831 	bl	8000534 <LCD_MOVE_CURSOR>
	}
	if (counter == 32)
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <LCD_SEND_CHAR+0x74>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b20      	cmp	r3, #32
 80004d8:	d104      	bne.n	80004e4 <LCD_SEND_CHAR+0x68>
	{
		LCD_CLEAR_SCREEN();
 80004da:	f000 f820 	bl	800051e <LCD_CLEAR_SCREEN>
		counter = 0;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <LCD_SEND_CHAR+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
	}
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010800 	.word	0x40010800
 80004f0:	200000a0 	.word	0x200000a0

080004f4 <LCD_SEND_STR>:

void LCD_SEND_STR(uint8_t * data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	while(*data != 0)
 80004fc:	e007      	b.n	800050e <LCD_SEND_STR+0x1a>
	{
		LCD_SEND_CHAR(*data);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ffba 	bl	800047c <LCD_SEND_CHAR>
		data ++;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3301      	adds	r3, #1
 800050c:	607b      	str	r3, [r7, #4]
	while(*data != 0)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1f3      	bne.n	80004fe <LCD_SEND_STR+0xa>


	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <LCD_CLEAR_SCREEN>:
void LCD_CLEAR_SCREEN(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_CLEAR);
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff ff84 	bl	8000430 <LCD_SEND_COMMAND>
	_delay_ms(10);
 8000528:	200a      	movs	r0, #10
 800052a:	f7ff ff0b 	bl	8000344 <_delay_ms>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR(uint8_t row , uint8_t col)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	if (row <1 || row >2 || col < 1 || col >16)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <LCD_MOVE_CURSOR+0x28>
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d805      	bhi.n	800055c <LCD_MOVE_CURSOR+0x28>
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <LCD_MOVE_CURSOR+0x28>
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	2b10      	cmp	r3, #16
 800055a:	d903      	bls.n	8000564 <LCD_MOVE_CURSOR+0x30>
	{
		LCD_SEND_COMMAND(0x80);
 800055c:	2080      	movs	r0, #128	; 0x80
 800055e:	f7ff ff67 	bl	8000430 <LCD_SEND_COMMAND>
	else if (row == 2)
	{
		LCD_SEND_COMMAND(0xc0 + col -1);
		counter = col + 16;
	}
}
 8000562:	e01a      	b.n	800059a <LCD_MOVE_CURSOR+0x66>
	else if (row == 1)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d109      	bne.n	800057e <LCD_MOVE_CURSOR+0x4a>
		LCD_SEND_COMMAND(0x80 + col -1);
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	337f      	adds	r3, #127	; 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ff5d 	bl	8000430 <LCD_SEND_COMMAND>
		counter = col;
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <LCD_MOVE_CURSOR+0x70>)
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	7013      	strb	r3, [r2, #0]
}
 800057c:	e00d      	b.n	800059a <LCD_MOVE_CURSOR+0x66>
	else if (row == 2)
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d10a      	bne.n	800059a <LCD_MOVE_CURSOR+0x66>
		LCD_SEND_COMMAND(0xc0 + col -1);
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	3b41      	subs	r3, #65	; 0x41
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff50 	bl	8000430 <LCD_SEND_COMMAND>
		counter = col + 16;
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	3310      	adds	r3, #16
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <LCD_MOVE_CURSOR+0x70>)
 8000598:	701a      	strb	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000a0 	.word	0x200000a0

080005a8 <LCD_SEND_INT>:

void LCD_SEND_INT(unsigned int  data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	unsigned char str[9];
	sprintf(str , "%d" , data);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4906      	ldr	r1, [pc, #24]	; (80005d0 <LCD_SEND_INT+0x28>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fc63 	bl	8000e84 <siprintf>
	LCD_SEND_STR(str);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff96 	bl	80004f4 <LCD_SEND_STR>
}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	080016f0 	.word	0x080016f0

080005d4 <main>:
		MCAL_USART_SEND_DATA(USART1,  & buff, enable);
	}
}

int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	GPIO_PINCONFIG pinconf;
	CLOCK_ENABLE_GPIOA;
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <main+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0x5c>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6193      	str	r3, [r2, #24]
	CLOCK_ENABLE_GPIOB;
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <main+0x5c>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6193      	str	r3, [r2, #24]
	CLOCK_ENABLE_AFIO;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <main+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
	LCD_INIT();
 80005fe:	f7ff fecd 	bl	800039c <LCD_INIT>
	LCD_CLEAR_SCREEN();
 8000602:	f7ff ff8c 	bl	800051e <LCD_CLEAR_SCREEN>
	KEYPAD_INIT();
 8000606:	f7ff fdb3 	bl	8000170 <KEYPAD_INIT>



	while(1)
	{
		if(KEYPAD_READ() != 0xff)
 800060a:	f7ff fe0d 	bl	8000228 <KEYPAD_READ>
 800060e:	4603      	mov	r3, r0
 8000610:	2bff      	cmp	r3, #255	; 0xff
 8000612:	d0fa      	beq.n	800060a <main+0x36>
		{
			x= KEYPAD_READ();
 8000614:	f7ff fe08 	bl	8000228 <KEYPAD_READ>
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
			LCD_SEND_CHAR(x);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff2c 	bl	800047c <LCD_SEND_CHAR>
			checknum(x);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f804 	bl	8000634 <checknum>
		if(KEYPAD_READ() != 0xff)
 800062c:	e7ed      	b.n	800060a <main+0x36>
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <checknum>:
		}
	}
}

void checknum(char x)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	if ( x == '+' &&  (flag==0 || flag2==1))
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b2b      	cmp	r3, #43	; 0x2b
 8000642:	d111      	bne.n	8000668 <checknum+0x34>
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <checknum+0x108>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <checknum+0x20>
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <checknum+0x10c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d109      	bne.n	8000668 <checknum+0x34>
	{

					flag=1;
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <checknum+0x108>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
					flag2=0;
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <checknum+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
					mode=4;
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <checknum+0x110>)
 8000662:	2204      	movs	r2, #4
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	e064      	b.n	8000732 <checknum+0xfe>


	}
	else if ( x == '/' &&  (flag==0 || flag2==1))
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b2f      	cmp	r3, #47	; 0x2f
 800066c:	d111      	bne.n	8000692 <checknum+0x5e>
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <checknum+0x108>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <checknum+0x4a>
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <checknum+0x10c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d109      	bne.n	8000692 <checknum+0x5e>
	{
							flag=1;
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <checknum+0x108>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
							flag2=0;
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <checknum+0x10c>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
							mode=1;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <checknum+0x110>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e04f      	b.n	8000732 <checknum+0xfe>
	}
	else if ( x == '-' &&  (flag==0 || flag2==1))
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b2d      	cmp	r3, #45	; 0x2d
 8000696:	d111      	bne.n	80006bc <checknum+0x88>
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <checknum+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <checknum+0x74>
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <checknum+0x10c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d109      	bne.n	80006bc <checknum+0x88>
	{
						flag=1;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <checknum+0x108>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
						flag2=0;
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <checknum+0x10c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
						mode=3;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <checknum+0x110>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e03a      	b.n	8000732 <checknum+0xfe>
	}
	else if ( x == '*' &&  (flag==0 || flag2==1))
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b2a      	cmp	r3, #42	; 0x2a
 80006c0:	d111      	bne.n	80006e6 <checknum+0xb2>
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <checknum+0x108>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <checknum+0x9e>
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <checknum+0x10c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d109      	bne.n	80006e6 <checknum+0xb2>
	{
								flag=1;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <checknum+0x108>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
								flag2=0;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <checknum+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
								mode=2;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <checknum+0x110>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	e025      	b.n	8000732 <checknum+0xfe>
	}
	else if (x == '=')
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b3d      	cmp	r3, #61	; 0x3d
 80006ea:	d11c      	bne.n	8000726 <checknum+0xf2>
	{
					switch(mode)
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <checknum+0x110>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d81d      	bhi.n	8000732 <checknum+0xfe>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <checknum+0xc8>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	08000713 	.word	0x08000713
 8000704:	08000719 	.word	0x08000719
 8000708:	0800071f 	.word	0x0800071f
										{
											case 1:
											{
												dev();
 800070c:	f000 f898 	bl	8000840 <dev>
												break;
 8000710:	e00f      	b.n	8000732 <checknum+0xfe>
											}
											case 2:
											{
												mul();
 8000712:	f000 f871 	bl	80007f8 <mul>
												break;
 8000716:	e00c      	b.n	8000732 <checknum+0xfe>
											}
											case 3:
											{
												sub();
 8000718:	f000 f8b6 	bl	8000888 <sub>
												break;
 800071c:	e009      	b.n	8000732 <checknum+0xfe>
											}
											case 4:
											{
												sum();
 800071e:	f000 f849 	bl	80007b4 <sum>
												break;
 8000722:	bf00      	nop
 8000724:	e005      	b.n	8000732 <checknum+0xfe>
											}
										}
	}
	else
	{
		setNum(x-48);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	3b30      	subs	r3, #48	; 0x30
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f80c 	bl	8000748 <setNum>
	}

}
 8000730:	e7ff      	b.n	8000732 <checknum+0xfe>
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000008c 	.word	0x2000008c
 8000740:	20000088 	.word	0x20000088
 8000744:	20000090 	.word	0x20000090

08000748 <setNum>:

void setNum(int n)// متد مقدار دهی عملگرها
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	// برای عملوند دوم
    if(flag==1)
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <setNum+0x60>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d10f      	bne.n	8000778 <setNum+0x30>
    {
		// اضافه کردن رقم جدید انتخاب شده به عنوان یکان جدید
		// مثلا الان مقدار عملگر 1 است و کار بر دکمه 5 را وارد کرده
		// در این حالت نتیجه میشود 15
        num2=(num2)*10;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <setNum+0x64>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	461a      	mov	r2, r3
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <setNum+0x64>)
 8000768:	601a      	str	r2, [r3, #0]
        num2+=n;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <setNum+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <setNum+0x64>)
 8000774:	6013      	str	r3, [r2, #0]
		// مثلا الان مقدار عملگر 1 است و کار بر دکمه 5 را وارد کرده
		// در این حالت نتیجه میشود 15
        num1=(num1)*10;
        num1+=n;
    }
}
 8000776:	e012      	b.n	800079e <setNum+0x56>
    else if(flag==0)
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setNum+0x60>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10e      	bne.n	800079e <setNum+0x56>
        num1=(num1)*10;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <setNum+0x68>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	461a      	mov	r2, r3
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <setNum+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
        num1+=n;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <setNum+0x68>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <setNum+0x68>)
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	20000084 	.word	0x20000084
 80007b0:	20000080 	.word	0x20000080

080007b4 <sum>:

void sum()// متد جمع
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
    int answer=num1+num2;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <sum+0x38>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <sum+0x3c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	607b      	str	r3, [r7, #4]
    num1=answer;
 80007c6:	4a09      	ldr	r2, [pc, #36]	; (80007ec <sum+0x38>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6013      	str	r3, [r2, #0]
    num2=0;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <sum+0x3c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
    LCD_CLEAR_SCREEN();
 80007d2:	f7ff fea4 	bl	800051e <LCD_CLEAR_SCREEN>
    LCD_SEND_INT(answer);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fee5 	bl	80005a8 <LCD_SEND_INT>
    flag2=1;
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <sum+0x40>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000080 	.word	0x20000080
 80007f0:	20000084 	.word	0x20000084
 80007f4:	20000088 	.word	0x20000088

080007f8 <mul>:

void mul()//متد ضرب
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
    int answer=num1*num2;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <mul+0x3c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <mul+0x40>)
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	607b      	str	r3, [r7, #4]
    num2=0;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <mul+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
    num1=answer;
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <mul+0x3c>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6013      	str	r3, [r2, #0]
    LCD_CLEAR_SCREEN();
 8000818:	f7ff fe81 	bl	800051e <LCD_CLEAR_SCREEN>
    LCD_SEND_INT(answer);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fec2 	bl	80005a8 <LCD_SEND_INT>
    flag2=1;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <mul+0x44>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000080 	.word	0x20000080
 8000838:	20000084 	.word	0x20000084
 800083c:	20000088 	.word	0x20000088

08000840 <dev>:

void dev()//متد تقسیم
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
    int answer=num1/num2;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <dev+0x3c>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <dev+0x40>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000852:	607b      	str	r3, [r7, #4]
    num2=0;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <dev+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
    LCD_CLEAR_SCREEN();
 800085a:	f7ff fe60 	bl	800051e <LCD_CLEAR_SCREEN>
    num1=answer;
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <dev+0x3c>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6013      	str	r3, [r2, #0]
    LCD_SEND_INT(answer);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe9e 	bl	80005a8 <LCD_SEND_INT>
    flag2=1;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <dev+0x44>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000080 	.word	0x20000080
 8000880:	20000084 	.word	0x20000084
 8000884:	20000088 	.word	0x20000088

08000888 <sub>:

void sub()// متد تفریق
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
    int answer=num1-num2;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <sub+0x38>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <sub+0x3c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	607b      	str	r3, [r7, #4]
    num1=answer;
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <sub+0x38>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
    num2=0;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <sub+0x3c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
    LCD_CLEAR_SCREEN();
 80008a6:	f7ff fe3a 	bl	800051e <LCD_CLEAR_SCREEN>
    LCD_SEND_INT(answer);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe7b 	bl	80005a8 <LCD_SEND_INT>
    flag2=1;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <sub+0x40>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000080 	.word	0x20000080
 80008c4:	20000084 	.word	0x20000084
 80008c8:	20000088 	.word	0x20000088

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f000 fa98 	bl	8000e30 <__errno>
 8000900:	4602      	mov	r2, r0
 8000902:	230c      	movs	r3, #12
 8000904:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20002800 	.word	0x20002800
 800092c:	00000400 	.word	0x00000400
 8000930:	20000094 	.word	0x20000094
 8000934:	200000e8 	.word	0x200000e8

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000966:	f000 fa69 	bl	8000e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fe33 	bl	80005d4 <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800097c:	08001730 	.word	0x08001730
  ldr r2, =_sbss
 8000980:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000984:	200000e8 	.word	0x200000e8

08000988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_2_IRQHandler>
	...

0800098c <EXTI0_IRQHandler>:
 */



void EXTI0_IRQHandler (void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <EXTI0_IRQHandler+0x20>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4798      	blx	r3
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010400 	.word	0x40010400
 80009ac:	200000a4 	.word	0x200000a4

080009b0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <EXTI1_IRQHandler+0x1c>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <EXTI1_IRQHandler+0x1c>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <EXTI1_IRQHandler+0x20>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4798      	blx	r3
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010400 	.word	0x40010400
 80009d0:	200000a4 	.word	0x200000a4

080009d4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <EXTI2_IRQHandler+0x1c>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <EXTI2_IRQHandler+0x1c>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <EXTI2_IRQHandler+0x20>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4798      	blx	r3
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010400 	.word	0x40010400
 80009f4:	200000a4 	.word	0x200000a4

080009f8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI3_IRQHandler+0x1c>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EXTI3_IRQHandler+0x1c>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <EXTI3_IRQHandler+0x20>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4798      	blx	r3
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010400 	.word	0x40010400
 8000a18:	200000a4 	.word	0x200000a4

08000a1c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI4_IRQHandler+0x1c>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <EXTI4_IRQHandler+0x1c>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <EXTI4_IRQHandler+0x20>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	4798      	blx	r3
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010400 	.word	0x40010400
 8000a3c:	200000a4 	.word	0x200000a4

08000a40 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if (READ_BIT(EXTI->PR,5)) 		{EXTI->PR |= (1<<5);  GP_IRQ_CALLBACK[5]();}
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <EXTI9_5_IRQHandler+0x22>
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	6153      	str	r3, [r2, #20]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4798      	blx	r3
	if (READ_BIT(EXTI->PR,6)) 		{EXTI->PR |= (1<<6);  GP_IRQ_CALLBACK[6]();}
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d008      	beq.n	8000a80 <EXTI9_5_IRQHandler+0x40>
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4798      	blx	r3
	if (READ_BIT(EXTI->PR,7)) 		{EXTI->PR |= (1<<7);  GP_IRQ_CALLBACK[7]();}
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <EXTI9_5_IRQHandler+0x5e>
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6153      	str	r3, [r2, #20]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4798      	blx	r3
	if (READ_BIT(EXTI->PR,8)) 		{EXTI->PR |= (1<<8);  GP_IRQ_CALLBACK[8]();}
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <EXTI9_5_IRQHandler+0x7c>
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4798      	blx	r3
	if (READ_BIT(EXTI->PR,9)) 		{EXTI->PR |= (1<<9);  GP_IRQ_CALLBACK[9]();}
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <EXTI9_5_IRQHandler+0x9a>
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6153      	str	r3, [r2, #20]
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	4798      	blx	r3
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010400 	.word	0x40010400
 8000ae4:	200000a4 	.word	0x200000a4

08000ae8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	    if (READ_BIT(EXTI->PR,10)) 		{EXTI->PR |= (1<<10);  GP_IRQ_CALLBACK[10]();}
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d008      	beq.n	8000b0a <EXTI15_10_IRQHandler+0x22>
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6153      	str	r3, [r2, #20]
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	4798      	blx	r3
		if (READ_BIT(EXTI->PR,11)) 		{EXTI->PR |= (1<<11);  GP_IRQ_CALLBACK[11]();}
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d008      	beq.n	8000b28 <EXTI15_10_IRQHandler+0x40>
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	4798      	blx	r3
		if (READ_BIT(EXTI->PR,12)) 		{EXTI->PR |= (1<<12);  GP_IRQ_CALLBACK[12]();}
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d008      	beq.n	8000b46 <EXTI15_10_IRQHandler+0x5e>
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3e:	6153      	str	r3, [r2, #20]
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4798      	blx	r3
		if (READ_BIT(EXTI->PR,13)) 		{EXTI->PR |= (1<<13);  GP_IRQ_CALLBACK[13]();}
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d008      	beq.n	8000b64 <EXTI15_10_IRQHandler+0x7c>
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	4798      	blx	r3
		if (READ_BIT(EXTI->PR,14)) 		{EXTI->PR |= (1<<14);  GP_IRQ_CALLBACK[14]();}
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <EXTI15_10_IRQHandler+0x9a>
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7a:	6153      	str	r3, [r2, #20]
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b80:	4798      	blx	r3
		if (READ_BIT(EXTI->PR,15)) 		{EXTI->PR |= (1<<15);  GP_IRQ_CALLBACK[15]();}
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <EXTI15_10_IRQHandler+0xb8>
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9e:	4798      	blx	r3
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40010400 	.word	0x40010400
 8000ba8:	200000a4 	.word	0x200000a4

08000bac <SPI1_IRQHandler>:
 *                            IRQ
 * ==============================================================================
 */

void SPI1_IRQHandler (void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;
	irq_src.TXE = READ_BIT(SPI1->SR , 1);
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <SPI1_IRQHandler+0x3c>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	793b      	ldrb	r3, [r7, #4]
 8000bc0:	f362 0300 	bfi	r3, r2, #0, #1
 8000bc4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = READ_BIT(SPI1->SR , 0);
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <SPI1_IRQHandler+0x3c>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	793b      	ldrb	r3, [r7, #4]
 8000bd2:	f362 0341 	bfi	r3, r2, #1, #1
 8000bd6:	713b      	strb	r3, [r7, #4]
	GP_IRQ_CALLBACK[0](irq_src);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SPI1_IRQHandler+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	7938      	ldrb	r0, [r7, #4]
 8000bde:	4798      	blx	r3
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013000 	.word	0x40013000
 8000bec:	200000a4 	.word	0x200000a4

08000bf0 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;
	irq_src.TXE = READ_BIT(SPI2->SR , 1);
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <SPI2_IRQHandler+0x3c>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	793b      	ldrb	r3, [r7, #4]
 8000c04:	f362 0300 	bfi	r3, r2, #0, #1
 8000c08:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = READ_BIT(SPI2->SR , 0);
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SPI2_IRQHandler+0x3c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	793b      	ldrb	r3, [r7, #4]
 8000c16:	f362 0341 	bfi	r3, r2, #1, #1
 8000c1a:	713b      	strb	r3, [r7, #4]
	GP_IRQ_CALLBACK[1](irq_src);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SPI2_IRQHandler+0x40>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	7938      	ldrb	r0, [r7, #4]
 8000c22:	4798      	blx	r3
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40003800 	.word	0x40003800
 8000c30:	200000a4 	.word	0x200000a4

08000c34 <USART1_IRQHandler>:
	}

}

void USART1_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	GP_IRQ_CALLBACK[0]();
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <USART1_IRQHandler+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4798      	blx	r3
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000a4 	.word	0x200000a4

08000c48 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	GP_IRQ_CALLBACK[1]();
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <USART2_IRQHandler+0x10>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	4798      	blx	r3
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000a4 	.word	0x200000a4

08000c5c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	GP_IRQ_CALLBACK[2]();
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <USART3_IRQHandler+0x10>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4798      	blx	r3
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000a4 	.word	0x200000a4

08000c70 <GET_POS>:
#include"GPIO.h"


//get position in CRL & CRH to write MODE & CNF
uint8_t GET_POS(uint16_t pin_num)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	uint8_t pos;
	if(pin_num < 8)
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b07      	cmp	r3, #7
 8000c7e:	d804      	bhi.n	8000c8a <GET_POS+0x1a>
	{
		pos = 4 * pin_num;
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e004      	b.n	8000c94 <GET_POS+0x24>
	}
	else
	{
		pos = 4* (pin_num -8 );
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	73fb      	strb	r3, [r7, #15]
	}
	return pos;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <MCAL_GPIO_INIT>:
  @param [in]   -pinconf determine number and mode of pin
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_INIT(GPIO_TYPEDEF* GPIOX , GPIO_PINCONFIG* pinconf)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	uint32_t *confreg = (pinconf->Pin_Number < GPIO_PIN_8)?(&GPIOX->CRL):(&GPIOX->CRH);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d801      	bhi.n	8000cb6 <MCAL_GPIO_INIT+0x16>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <MCAL_GPIO_INIT+0x1a>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	60bb      	str	r3, [r7, #8]
	uint8_t pin;

	// clear CNFy[1:0]: & MODEy[1:0]
	(*confreg) &= ~(0x0f<<GET_POS(pinconf->Pin_Number));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffd5 	bl	8000c70 <GET_POS>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	230f      	movs	r3, #15
 8000ccc:	4093      	lsls	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	601a      	str	r2, [r3, #0]

	// if mode is output
	if((pinconf->MODE == GPIO_MODE_OUTPUT_PP) ||(pinconf->MODE == GPIO_MODE_OUTPUT_OP) || (pinconf->MODE == GPIO_MODE_OUTPUT_AF_OP) ||(pinconf->MODE == GPIO_MODE_OUTPUT_AF_PP))
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d00b      	beq.n	8000cfa <MCAL_GPIO_INIT+0x5a>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d007      	beq.n	8000cfa <MCAL_GPIO_INIT+0x5a>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d003      	beq.n	8000cfa <MCAL_GPIO_INIT+0x5a>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d10e      	bne.n	8000d18 <MCAL_GPIO_INIT+0x78>
	{
		pin = (((pinconf->Speed) | ((pinconf->MODE - 4)<<2 )) & (0x0f));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	78db      	ldrb	r3, [r3, #3]
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	789b      	ldrb	r3, [r3, #2]
 8000d04:	3b04      	subs	r3, #4
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e02f      	b.n	8000d78 <MCAL_GPIO_INIT+0xd8>

	}

	// if mode is input but not pull up or pull down
	else if((pinconf->MODE == GPIO_MODE_INPUT_Analog) || (pinconf->MODE == GPIO_MODE_INPUT_AF) || (pinconf->MODE == GPIO_MODE_INPUT_FLO))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d007      	beq.n	8000d30 <MCAL_GPIO_INIT+0x90>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d003      	beq.n	8000d30 <MCAL_GPIO_INIT+0x90>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	789b      	ldrb	r3, [r3, #2]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d107      	bne.n	8000d40 <MCAL_GPIO_INIT+0xa0>
	{
		pin = (((pinconf->MODE)<<2) & (0x0f));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e01b      	b.n	8000d78 <MCAL_GPIO_INIT+0xd8>

	}

	else // if mode is GPIO_MODE_INPUT_PU or GPIO_MODE_INPUT_PD
	{
		pin = (((0b10)<<2) & (0x0f));
 8000d40:	2308      	movs	r3, #8
 8000d42:	73fb      	strb	r3, [r7, #15]

		if (pinconf->MODE == GPIO_MODE_INPUT_PU )
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	789b      	ldrb	r3, [r3, #2]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d10a      	bne.n	8000d62 <MCAL_GPIO_INIT+0xc2>
		{
			GPIOX->ODR |=(1<<pinconf->Pin_Number);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	8812      	ldrh	r2, [r2, #0]
 8000d54:	4611      	mov	r1, r2
 8000d56:	2201      	movs	r2, #1
 8000d58:	408a      	lsls	r2, r1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	e00a      	b.n	8000d78 <MCAL_GPIO_INIT+0xd8>
		}
		else
		{
			GPIOX->ODR &= ~(1<<pinconf->Pin_Number);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	8812      	ldrh	r2, [r2, #0]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	408a      	lsls	r2, r1
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]
		}

	}
	//write on GPIO_CRL or CRH
	(*confreg) |= (pin<<GET_POS(pinconf->Pin_Number));
 8000d78:	7bfc      	ldrb	r4, [r7, #15]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff76 	bl	8000c70 <GET_POS>
 8000d84:	4603      	mov	r3, r0
 8000d86:	fa04 f203 	lsl.w	r2, r4, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	601a      	str	r2, [r3, #0]


}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}

08000d9c <MCAL_GPIO_Readpin>:
 * @retval 		 -pin read
 * Note			-none
 */

uint8_t MCAL_GPIO_Readpin(GPIO_TYPEDEF* GPIOX , uint8_t pinnumber)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
	uint8_t pinread;
	pinread = READ_BIT(GPIOX->IDR,pinnumber);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	401a      	ands	r2, r3
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbc:	73fb      	strb	r3, [r7, #15]
	return pinread;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]

}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <MCAL_GPIO_Writepin>:
 * @param [in]   -value determine value pin
 * @retval 		 -none
 * Note			-none			-none
 */
void MCAL_GPIO_Writepin(GPIO_TYPEDEF* GPIOX , uint8_t pinnumber,uint8_t value)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	70bb      	strb	r3, [r7, #2]
	if(value == 1)
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d109      	bne.n	8000df4 <MCAL_GPIO_Writepin+0x2a>
	{
		SET_BIT(GPIOX->ODR,pinnumber);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60da      	str	r2, [r3, #12]
	else
	{
		RESET_BIT(GPIOX->ODR,pinnumber);
	}

}
 8000df2:	e009      	b.n	8000e08 <MCAL_GPIO_Writepin+0x3e>
		RESET_BIT(GPIOX->ODR,pinnumber);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <MCAL_GPIO_Writeport>:
 * @param [in]   -value which written on port
 * @retval 		 -none
 * Note			-none
 */
void MCAL_GPIO_Writeport(GPIO_TYPEDEF* GPIOX ,uint16_t value )
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR = value;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	60da      	str	r2, [r3, #12]

}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
	...

08000e30 <__errno>:
 8000e30:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <__errno+0x8>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <__libc_init_array>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	2500      	movs	r5, #0
 8000e40:	4e0c      	ldr	r6, [pc, #48]	; (8000e74 <__libc_init_array+0x38>)
 8000e42:	4c0d      	ldr	r4, [pc, #52]	; (8000e78 <__libc_init_array+0x3c>)
 8000e44:	1ba4      	subs	r4, r4, r6
 8000e46:	10a4      	asrs	r4, r4, #2
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	d109      	bne.n	8000e60 <__libc_init_array+0x24>
 8000e4c:	f000 fc2c 	bl	80016a8 <_init>
 8000e50:	2500      	movs	r5, #0
 8000e52:	4e0a      	ldr	r6, [pc, #40]	; (8000e7c <__libc_init_array+0x40>)
 8000e54:	4c0a      	ldr	r4, [pc, #40]	; (8000e80 <__libc_init_array+0x44>)
 8000e56:	1ba4      	subs	r4, r4, r6
 8000e58:	10a4      	asrs	r4, r4, #2
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	d105      	bne.n	8000e6a <__libc_init_array+0x2e>
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e64:	4798      	blx	r3
 8000e66:	3501      	adds	r5, #1
 8000e68:	e7ee      	b.n	8000e48 <__libc_init_array+0xc>
 8000e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e6e:	4798      	blx	r3
 8000e70:	3501      	adds	r5, #1
 8000e72:	e7f2      	b.n	8000e5a <__libc_init_array+0x1e>
 8000e74:	08001728 	.word	0x08001728
 8000e78:	08001728 	.word	0x08001728
 8000e7c:	08001728 	.word	0x08001728
 8000e80:	0800172c 	.word	0x0800172c

08000e84 <siprintf>:
 8000e84:	b40e      	push	{r1, r2, r3}
 8000e86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e8a:	b500      	push	{lr}
 8000e8c:	b09c      	sub	sp, #112	; 0x70
 8000e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8000e90:	9002      	str	r0, [sp, #8]
 8000e92:	9006      	str	r0, [sp, #24]
 8000e94:	9107      	str	r1, [sp, #28]
 8000e96:	9104      	str	r1, [sp, #16]
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <siprintf+0x38>)
 8000e9a:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <siprintf+0x3c>)
 8000e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ea0:	9105      	str	r1, [sp, #20]
 8000ea2:	6800      	ldr	r0, [r0, #0]
 8000ea4:	a902      	add	r1, sp, #8
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	f000 f866 	bl	8000f78 <_svfiprintf_r>
 8000eac:	2200      	movs	r2, #0
 8000eae:	9b02      	ldr	r3, [sp, #8]
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	b01c      	add	sp, #112	; 0x70
 8000eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000eb8:	b003      	add	sp, #12
 8000eba:	4770      	bx	lr
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	ffff0208 	.word	0xffff0208

08000ec4 <__ssputs_r>:
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	688e      	ldr	r6, [r1, #8]
 8000eca:	4682      	mov	sl, r0
 8000ecc:	429e      	cmp	r6, r3
 8000ece:	460c      	mov	r4, r1
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	4699      	mov	r9, r3
 8000ed4:	d837      	bhi.n	8000f46 <__ssputs_r+0x82>
 8000ed6:	898a      	ldrh	r2, [r1, #12]
 8000ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000edc:	d031      	beq.n	8000f42 <__ssputs_r+0x7e>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	6825      	ldr	r5, [r4, #0]
 8000ee2:	6909      	ldr	r1, [r1, #16]
 8000ee4:	1a6f      	subs	r7, r5, r1
 8000ee6:	6965      	ldr	r5, [r4, #20]
 8000ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000eec:	fb95 f5f3 	sdiv	r5, r5, r3
 8000ef0:	f109 0301 	add.w	r3, r9, #1
 8000ef4:	443b      	add	r3, r7
 8000ef6:	429d      	cmp	r5, r3
 8000ef8:	bf38      	it	cc
 8000efa:	461d      	movcc	r5, r3
 8000efc:	0553      	lsls	r3, r2, #21
 8000efe:	d530      	bpl.n	8000f62 <__ssputs_r+0x9e>
 8000f00:	4629      	mov	r1, r5
 8000f02:	f000 fb37 	bl	8001574 <_malloc_r>
 8000f06:	4606      	mov	r6, r0
 8000f08:	b950      	cbnz	r0, 8000f20 <__ssputs_r+0x5c>
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f8ca 3000 	str.w	r3, [sl]
 8000f14:	89a3      	ldrh	r3, [r4, #12]
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	81a3      	strh	r3, [r4, #12]
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	463a      	mov	r2, r7
 8000f22:	6921      	ldr	r1, [r4, #16]
 8000f24:	f000 fab6 	bl	8001494 <memcpy>
 8000f28:	89a3      	ldrh	r3, [r4, #12]
 8000f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f32:	81a3      	strh	r3, [r4, #12]
 8000f34:	6126      	str	r6, [r4, #16]
 8000f36:	443e      	add	r6, r7
 8000f38:	6026      	str	r6, [r4, #0]
 8000f3a:	464e      	mov	r6, r9
 8000f3c:	6165      	str	r5, [r4, #20]
 8000f3e:	1bed      	subs	r5, r5, r7
 8000f40:	60a5      	str	r5, [r4, #8]
 8000f42:	454e      	cmp	r6, r9
 8000f44:	d900      	bls.n	8000f48 <__ssputs_r+0x84>
 8000f46:	464e      	mov	r6, r9
 8000f48:	4632      	mov	r2, r6
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	f000 faac 	bl	80014aa <memmove>
 8000f52:	68a3      	ldr	r3, [r4, #8]
 8000f54:	2000      	movs	r0, #0
 8000f56:	1b9b      	subs	r3, r3, r6
 8000f58:	60a3      	str	r3, [r4, #8]
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	441e      	add	r6, r3
 8000f5e:	6026      	str	r6, [r4, #0]
 8000f60:	e7dc      	b.n	8000f1c <__ssputs_r+0x58>
 8000f62:	462a      	mov	r2, r5
 8000f64:	f000 fb60 	bl	8001628 <_realloc_r>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d1e2      	bne.n	8000f34 <__ssputs_r+0x70>
 8000f6e:	6921      	ldr	r1, [r4, #16]
 8000f70:	4650      	mov	r0, sl
 8000f72:	f000 fab3 	bl	80014dc <_free_r>
 8000f76:	e7c8      	b.n	8000f0a <__ssputs_r+0x46>

08000f78 <_svfiprintf_r>:
 8000f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	898b      	ldrh	r3, [r1, #12]
 8000f80:	b09d      	sub	sp, #116	; 0x74
 8000f82:	061f      	lsls	r7, r3, #24
 8000f84:	4680      	mov	r8, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	4616      	mov	r6, r2
 8000f8a:	d50f      	bpl.n	8000fac <_svfiprintf_r+0x34>
 8000f8c:	690b      	ldr	r3, [r1, #16]
 8000f8e:	b96b      	cbnz	r3, 8000fac <_svfiprintf_r+0x34>
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	f000 faef 	bl	8001574 <_malloc_r>
 8000f96:	6020      	str	r0, [r4, #0]
 8000f98:	6120      	str	r0, [r4, #16]
 8000f9a:	b928      	cbnz	r0, 8000fa8 <_svfiprintf_r+0x30>
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	f8c8 3000 	str.w	r3, [r8]
 8000fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa6:	e0c8      	b.n	800113a <_svfiprintf_r+0x1c2>
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	6163      	str	r3, [r4, #20]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fb6:	2330      	movs	r3, #48	; 0x30
 8000fb8:	f04f 0b01 	mov.w	fp, #1
 8000fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fc0:	9503      	str	r5, [sp, #12]
 8000fc2:	4637      	mov	r7, r6
 8000fc4:	463d      	mov	r5, r7
 8000fc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000fca:	b10b      	cbz	r3, 8000fd0 <_svfiprintf_r+0x58>
 8000fcc:	2b25      	cmp	r3, #37	; 0x25
 8000fce:	d13e      	bne.n	800104e <_svfiprintf_r+0xd6>
 8000fd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8000fd4:	d00b      	beq.n	8000fee <_svfiprintf_r+0x76>
 8000fd6:	4653      	mov	r3, sl
 8000fd8:	4632      	mov	r2, r6
 8000fda:	4621      	mov	r1, r4
 8000fdc:	4640      	mov	r0, r8
 8000fde:	f7ff ff71 	bl	8000ec4 <__ssputs_r>
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	f000 80a4 	beq.w	8001130 <_svfiprintf_r+0x1b8>
 8000fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fea:	4453      	add	r3, sl
 8000fec:	9309      	str	r3, [sp, #36]	; 0x24
 8000fee:	783b      	ldrb	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 809d 	beq.w	8001130 <_svfiprintf_r+0x1b8>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	9307      	str	r3, [sp, #28]
 8001004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001008:	931a      	str	r3, [sp, #104]	; 0x68
 800100a:	462f      	mov	r7, r5
 800100c:	2205      	movs	r2, #5
 800100e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001012:	4850      	ldr	r0, [pc, #320]	; (8001154 <_svfiprintf_r+0x1dc>)
 8001014:	f000 fa30 	bl	8001478 <memchr>
 8001018:	9b04      	ldr	r3, [sp, #16]
 800101a:	b9d0      	cbnz	r0, 8001052 <_svfiprintf_r+0xda>
 800101c:	06d9      	lsls	r1, r3, #27
 800101e:	bf44      	itt	mi
 8001020:	2220      	movmi	r2, #32
 8001022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001026:	071a      	lsls	r2, r3, #28
 8001028:	bf44      	itt	mi
 800102a:	222b      	movmi	r2, #43	; 0x2b
 800102c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001030:	782a      	ldrb	r2, [r5, #0]
 8001032:	2a2a      	cmp	r2, #42	; 0x2a
 8001034:	d015      	beq.n	8001062 <_svfiprintf_r+0xea>
 8001036:	462f      	mov	r7, r5
 8001038:	2000      	movs	r0, #0
 800103a:	250a      	movs	r5, #10
 800103c:	9a07      	ldr	r2, [sp, #28]
 800103e:	4639      	mov	r1, r7
 8001040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001044:	3b30      	subs	r3, #48	; 0x30
 8001046:	2b09      	cmp	r3, #9
 8001048:	d94d      	bls.n	80010e6 <_svfiprintf_r+0x16e>
 800104a:	b1b8      	cbz	r0, 800107c <_svfiprintf_r+0x104>
 800104c:	e00f      	b.n	800106e <_svfiprintf_r+0xf6>
 800104e:	462f      	mov	r7, r5
 8001050:	e7b8      	b.n	8000fc4 <_svfiprintf_r+0x4c>
 8001052:	4a40      	ldr	r2, [pc, #256]	; (8001154 <_svfiprintf_r+0x1dc>)
 8001054:	463d      	mov	r5, r7
 8001056:	1a80      	subs	r0, r0, r2
 8001058:	fa0b f000 	lsl.w	r0, fp, r0
 800105c:	4318      	orrs	r0, r3
 800105e:	9004      	str	r0, [sp, #16]
 8001060:	e7d3      	b.n	800100a <_svfiprintf_r+0x92>
 8001062:	9a03      	ldr	r2, [sp, #12]
 8001064:	1d11      	adds	r1, r2, #4
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	9103      	str	r1, [sp, #12]
 800106a:	2a00      	cmp	r2, #0
 800106c:	db01      	blt.n	8001072 <_svfiprintf_r+0xfa>
 800106e:	9207      	str	r2, [sp, #28]
 8001070:	e004      	b.n	800107c <_svfiprintf_r+0x104>
 8001072:	4252      	negs	r2, r2
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	9207      	str	r2, [sp, #28]
 800107a:	9304      	str	r3, [sp, #16]
 800107c:	783b      	ldrb	r3, [r7, #0]
 800107e:	2b2e      	cmp	r3, #46	; 0x2e
 8001080:	d10c      	bne.n	800109c <_svfiprintf_r+0x124>
 8001082:	787b      	ldrb	r3, [r7, #1]
 8001084:	2b2a      	cmp	r3, #42	; 0x2a
 8001086:	d133      	bne.n	80010f0 <_svfiprintf_r+0x178>
 8001088:	9b03      	ldr	r3, [sp, #12]
 800108a:	3702      	adds	r7, #2
 800108c:	1d1a      	adds	r2, r3, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	9203      	str	r2, [sp, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	bfb8      	it	lt
 8001096:	f04f 33ff 	movlt.w	r3, #4294967295
 800109a:	9305      	str	r3, [sp, #20]
 800109c:	4d2e      	ldr	r5, [pc, #184]	; (8001158 <_svfiprintf_r+0x1e0>)
 800109e:	2203      	movs	r2, #3
 80010a0:	7839      	ldrb	r1, [r7, #0]
 80010a2:	4628      	mov	r0, r5
 80010a4:	f000 f9e8 	bl	8001478 <memchr>
 80010a8:	b138      	cbz	r0, 80010ba <_svfiprintf_r+0x142>
 80010aa:	2340      	movs	r3, #64	; 0x40
 80010ac:	1b40      	subs	r0, r0, r5
 80010ae:	fa03 f000 	lsl.w	r0, r3, r0
 80010b2:	9b04      	ldr	r3, [sp, #16]
 80010b4:	3701      	adds	r7, #1
 80010b6:	4303      	orrs	r3, r0
 80010b8:	9304      	str	r3, [sp, #16]
 80010ba:	7839      	ldrb	r1, [r7, #0]
 80010bc:	2206      	movs	r2, #6
 80010be:	4827      	ldr	r0, [pc, #156]	; (800115c <_svfiprintf_r+0x1e4>)
 80010c0:	1c7e      	adds	r6, r7, #1
 80010c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010c6:	f000 f9d7 	bl	8001478 <memchr>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d038      	beq.n	8001140 <_svfiprintf_r+0x1c8>
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <_svfiprintf_r+0x1e8>)
 80010d0:	bb13      	cbnz	r3, 8001118 <_svfiprintf_r+0x1a0>
 80010d2:	9b03      	ldr	r3, [sp, #12]
 80010d4:	3307      	adds	r3, #7
 80010d6:	f023 0307 	bic.w	r3, r3, #7
 80010da:	3308      	adds	r3, #8
 80010dc:	9303      	str	r3, [sp, #12]
 80010de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010e0:	444b      	add	r3, r9
 80010e2:	9309      	str	r3, [sp, #36]	; 0x24
 80010e4:	e76d      	b.n	8000fc2 <_svfiprintf_r+0x4a>
 80010e6:	fb05 3202 	mla	r2, r5, r2, r3
 80010ea:	2001      	movs	r0, #1
 80010ec:	460f      	mov	r7, r1
 80010ee:	e7a6      	b.n	800103e <_svfiprintf_r+0xc6>
 80010f0:	2300      	movs	r3, #0
 80010f2:	250a      	movs	r5, #10
 80010f4:	4619      	mov	r1, r3
 80010f6:	3701      	adds	r7, #1
 80010f8:	9305      	str	r3, [sp, #20]
 80010fa:	4638      	mov	r0, r7
 80010fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001100:	3a30      	subs	r2, #48	; 0x30
 8001102:	2a09      	cmp	r2, #9
 8001104:	d903      	bls.n	800110e <_svfiprintf_r+0x196>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0c8      	beq.n	800109c <_svfiprintf_r+0x124>
 800110a:	9105      	str	r1, [sp, #20]
 800110c:	e7c6      	b.n	800109c <_svfiprintf_r+0x124>
 800110e:	fb05 2101 	mla	r1, r5, r1, r2
 8001112:	2301      	movs	r3, #1
 8001114:	4607      	mov	r7, r0
 8001116:	e7f0      	b.n	80010fa <_svfiprintf_r+0x182>
 8001118:	ab03      	add	r3, sp, #12
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4622      	mov	r2, r4
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_svfiprintf_r+0x1ec>)
 8001120:	a904      	add	r1, sp, #16
 8001122:	4640      	mov	r0, r8
 8001124:	f3af 8000 	nop.w
 8001128:	f1b0 3fff 	cmp.w	r0, #4294967295
 800112c:	4681      	mov	r9, r0
 800112e:	d1d6      	bne.n	80010de <_svfiprintf_r+0x166>
 8001130:	89a3      	ldrh	r3, [r4, #12]
 8001132:	065b      	lsls	r3, r3, #25
 8001134:	f53f af35 	bmi.w	8000fa2 <_svfiprintf_r+0x2a>
 8001138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800113a:	b01d      	add	sp, #116	; 0x74
 800113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001140:	ab03      	add	r3, sp, #12
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4622      	mov	r2, r4
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_svfiprintf_r+0x1ec>)
 8001148:	a904      	add	r1, sp, #16
 800114a:	4640      	mov	r0, r8
 800114c:	f000 f882 	bl	8001254 <_printf_i>
 8001150:	e7ea      	b.n	8001128 <_svfiprintf_r+0x1b0>
 8001152:	bf00      	nop
 8001154:	080016f3 	.word	0x080016f3
 8001158:	080016f9 	.word	0x080016f9
 800115c:	080016fd 	.word	0x080016fd
 8001160:	00000000 	.word	0x00000000
 8001164:	08000ec5 	.word	0x08000ec5

08001168 <_printf_common>:
 8001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800116c:	4691      	mov	r9, r2
 800116e:	461f      	mov	r7, r3
 8001170:	688a      	ldr	r2, [r1, #8]
 8001172:	690b      	ldr	r3, [r1, #16]
 8001174:	4606      	mov	r6, r0
 8001176:	4293      	cmp	r3, r2
 8001178:	bfb8      	it	lt
 800117a:	4613      	movlt	r3, r2
 800117c:	f8c9 3000 	str.w	r3, [r9]
 8001180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001184:	460c      	mov	r4, r1
 8001186:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800118a:	b112      	cbz	r2, 8001192 <_printf_common+0x2a>
 800118c:	3301      	adds	r3, #1
 800118e:	f8c9 3000 	str.w	r3, [r9]
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	0699      	lsls	r1, r3, #26
 8001196:	bf42      	ittt	mi
 8001198:	f8d9 3000 	ldrmi.w	r3, [r9]
 800119c:	3302      	addmi	r3, #2
 800119e:	f8c9 3000 	strmi.w	r3, [r9]
 80011a2:	6825      	ldr	r5, [r4, #0]
 80011a4:	f015 0506 	ands.w	r5, r5, #6
 80011a8:	d107      	bne.n	80011ba <_printf_common+0x52>
 80011aa:	f104 0a19 	add.w	sl, r4, #25
 80011ae:	68e3      	ldr	r3, [r4, #12]
 80011b0:	f8d9 2000 	ldr.w	r2, [r9]
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	dc29      	bgt.n	800120e <_printf_common+0xa6>
 80011ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	3300      	adds	r3, #0
 80011c2:	bf18      	it	ne
 80011c4:	2301      	movne	r3, #1
 80011c6:	0692      	lsls	r2, r2, #26
 80011c8:	d42e      	bmi.n	8001228 <_printf_common+0xc0>
 80011ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011ce:	4639      	mov	r1, r7
 80011d0:	4630      	mov	r0, r6
 80011d2:	47c0      	blx	r8
 80011d4:	3001      	adds	r0, #1
 80011d6:	d021      	beq.n	800121c <_printf_common+0xb4>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	68e5      	ldr	r5, [r4, #12]
 80011dc:	f003 0306 	and.w	r3, r3, #6
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	bf18      	it	ne
 80011e4:	2500      	movne	r5, #0
 80011e6:	f8d9 2000 	ldr.w	r2, [r9]
 80011ea:	f04f 0900 	mov.w	r9, #0
 80011ee:	bf08      	it	eq
 80011f0:	1aad      	subeq	r5, r5, r2
 80011f2:	68a3      	ldr	r3, [r4, #8]
 80011f4:	6922      	ldr	r2, [r4, #16]
 80011f6:	bf08      	it	eq
 80011f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011fc:	4293      	cmp	r3, r2
 80011fe:	bfc4      	itt	gt
 8001200:	1a9b      	subgt	r3, r3, r2
 8001202:	18ed      	addgt	r5, r5, r3
 8001204:	341a      	adds	r4, #26
 8001206:	454d      	cmp	r5, r9
 8001208:	d11a      	bne.n	8001240 <_printf_common+0xd8>
 800120a:	2000      	movs	r0, #0
 800120c:	e008      	b.n	8001220 <_printf_common+0xb8>
 800120e:	2301      	movs	r3, #1
 8001210:	4652      	mov	r2, sl
 8001212:	4639      	mov	r1, r7
 8001214:	4630      	mov	r0, r6
 8001216:	47c0      	blx	r8
 8001218:	3001      	adds	r0, #1
 800121a:	d103      	bne.n	8001224 <_printf_common+0xbc>
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	3501      	adds	r5, #1
 8001226:	e7c2      	b.n	80011ae <_printf_common+0x46>
 8001228:	2030      	movs	r0, #48	; 0x30
 800122a:	18e1      	adds	r1, r4, r3
 800122c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001236:	4422      	add	r2, r4
 8001238:	3302      	adds	r3, #2
 800123a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800123e:	e7c4      	b.n	80011ca <_printf_common+0x62>
 8001240:	2301      	movs	r3, #1
 8001242:	4622      	mov	r2, r4
 8001244:	4639      	mov	r1, r7
 8001246:	4630      	mov	r0, r6
 8001248:	47c0      	blx	r8
 800124a:	3001      	adds	r0, #1
 800124c:	d0e6      	beq.n	800121c <_printf_common+0xb4>
 800124e:	f109 0901 	add.w	r9, r9, #1
 8001252:	e7d8      	b.n	8001206 <_printf_common+0x9e>

08001254 <_printf_i>:
 8001254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001258:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800125c:	460c      	mov	r4, r1
 800125e:	7e09      	ldrb	r1, [r1, #24]
 8001260:	b085      	sub	sp, #20
 8001262:	296e      	cmp	r1, #110	; 0x6e
 8001264:	4617      	mov	r7, r2
 8001266:	4606      	mov	r6, r0
 8001268:	4698      	mov	r8, r3
 800126a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800126c:	f000 80b3 	beq.w	80013d6 <_printf_i+0x182>
 8001270:	d822      	bhi.n	80012b8 <_printf_i+0x64>
 8001272:	2963      	cmp	r1, #99	; 0x63
 8001274:	d036      	beq.n	80012e4 <_printf_i+0x90>
 8001276:	d80a      	bhi.n	800128e <_printf_i+0x3a>
 8001278:	2900      	cmp	r1, #0
 800127a:	f000 80b9 	beq.w	80013f0 <_printf_i+0x19c>
 800127e:	2958      	cmp	r1, #88	; 0x58
 8001280:	f000 8083 	beq.w	800138a <_printf_i+0x136>
 8001284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001288:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800128c:	e032      	b.n	80012f4 <_printf_i+0xa0>
 800128e:	2964      	cmp	r1, #100	; 0x64
 8001290:	d001      	beq.n	8001296 <_printf_i+0x42>
 8001292:	2969      	cmp	r1, #105	; 0x69
 8001294:	d1f6      	bne.n	8001284 <_printf_i+0x30>
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	0605      	lsls	r5, r0, #24
 800129c:	f103 0104 	add.w	r1, r3, #4
 80012a0:	d52a      	bpl.n	80012f8 <_printf_i+0xa4>
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6011      	str	r1, [r2, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da03      	bge.n	80012b2 <_printf_i+0x5e>
 80012aa:	222d      	movs	r2, #45	; 0x2d
 80012ac:	425b      	negs	r3, r3
 80012ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80012b2:	486f      	ldr	r0, [pc, #444]	; (8001470 <_printf_i+0x21c>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	e039      	b.n	800132c <_printf_i+0xd8>
 80012b8:	2973      	cmp	r1, #115	; 0x73
 80012ba:	f000 809d 	beq.w	80013f8 <_printf_i+0x1a4>
 80012be:	d808      	bhi.n	80012d2 <_printf_i+0x7e>
 80012c0:	296f      	cmp	r1, #111	; 0x6f
 80012c2:	d020      	beq.n	8001306 <_printf_i+0xb2>
 80012c4:	2970      	cmp	r1, #112	; 0x70
 80012c6:	d1dd      	bne.n	8001284 <_printf_i+0x30>
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	6023      	str	r3, [r4, #0]
 80012d0:	e003      	b.n	80012da <_printf_i+0x86>
 80012d2:	2975      	cmp	r1, #117	; 0x75
 80012d4:	d017      	beq.n	8001306 <_printf_i+0xb2>
 80012d6:	2978      	cmp	r1, #120	; 0x78
 80012d8:	d1d4      	bne.n	8001284 <_printf_i+0x30>
 80012da:	2378      	movs	r3, #120	; 0x78
 80012dc:	4865      	ldr	r0, [pc, #404]	; (8001474 <_printf_i+0x220>)
 80012de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012e2:	e055      	b.n	8001390 <_printf_i+0x13c>
 80012e4:	6813      	ldr	r3, [r2, #0]
 80012e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012ea:	1d19      	adds	r1, r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6011      	str	r1, [r2, #0]
 80012f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012f4:	2301      	movs	r3, #1
 80012f6:	e08c      	b.n	8001412 <_printf_i+0x1be>
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80012fe:	6011      	str	r1, [r2, #0]
 8001300:	bf18      	it	ne
 8001302:	b21b      	sxthne	r3, r3
 8001304:	e7cf      	b.n	80012a6 <_printf_i+0x52>
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	6825      	ldr	r5, [r4, #0]
 800130a:	1d18      	adds	r0, r3, #4
 800130c:	6010      	str	r0, [r2, #0]
 800130e:	0628      	lsls	r0, r5, #24
 8001310:	d501      	bpl.n	8001316 <_printf_i+0xc2>
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	e002      	b.n	800131c <_printf_i+0xc8>
 8001316:	0668      	lsls	r0, r5, #25
 8001318:	d5fb      	bpl.n	8001312 <_printf_i+0xbe>
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	296f      	cmp	r1, #111	; 0x6f
 800131e:	bf14      	ite	ne
 8001320:	220a      	movne	r2, #10
 8001322:	2208      	moveq	r2, #8
 8001324:	4852      	ldr	r0, [pc, #328]	; (8001470 <_printf_i+0x21c>)
 8001326:	2100      	movs	r1, #0
 8001328:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800132c:	6865      	ldr	r5, [r4, #4]
 800132e:	2d00      	cmp	r5, #0
 8001330:	60a5      	str	r5, [r4, #8]
 8001332:	f2c0 8095 	blt.w	8001460 <_printf_i+0x20c>
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	f021 0104 	bic.w	r1, r1, #4
 800133c:	6021      	str	r1, [r4, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d13d      	bne.n	80013be <_printf_i+0x16a>
 8001342:	2d00      	cmp	r5, #0
 8001344:	f040 808e 	bne.w	8001464 <_printf_i+0x210>
 8001348:	4665      	mov	r5, ip
 800134a:	2a08      	cmp	r2, #8
 800134c:	d10b      	bne.n	8001366 <_printf_i+0x112>
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	07db      	lsls	r3, r3, #31
 8001352:	d508      	bpl.n	8001366 <_printf_i+0x112>
 8001354:	6923      	ldr	r3, [r4, #16]
 8001356:	6862      	ldr	r2, [r4, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	bfde      	ittt	le
 800135c:	2330      	movle	r3, #48	; 0x30
 800135e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001362:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001366:	ebac 0305 	sub.w	r3, ip, r5
 800136a:	6123      	str	r3, [r4, #16]
 800136c:	f8cd 8000 	str.w	r8, [sp]
 8001370:	463b      	mov	r3, r7
 8001372:	aa03      	add	r2, sp, #12
 8001374:	4621      	mov	r1, r4
 8001376:	4630      	mov	r0, r6
 8001378:	f7ff fef6 	bl	8001168 <_printf_common>
 800137c:	3001      	adds	r0, #1
 800137e:	d14d      	bne.n	800141c <_printf_i+0x1c8>
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	b005      	add	sp, #20
 8001386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800138a:	4839      	ldr	r0, [pc, #228]	; (8001470 <_printf_i+0x21c>)
 800138c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001390:	6813      	ldr	r3, [r2, #0]
 8001392:	6821      	ldr	r1, [r4, #0]
 8001394:	1d1d      	adds	r5, r3, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6015      	str	r5, [r2, #0]
 800139a:	060a      	lsls	r2, r1, #24
 800139c:	d50b      	bpl.n	80013b6 <_printf_i+0x162>
 800139e:	07ca      	lsls	r2, r1, #31
 80013a0:	bf44      	itt	mi
 80013a2:	f041 0120 	orrmi.w	r1, r1, #32
 80013a6:	6021      	strmi	r1, [r4, #0]
 80013a8:	b91b      	cbnz	r3, 80013b2 <_printf_i+0x15e>
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	f022 0220 	bic.w	r2, r2, #32
 80013b0:	6022      	str	r2, [r4, #0]
 80013b2:	2210      	movs	r2, #16
 80013b4:	e7b7      	b.n	8001326 <_printf_i+0xd2>
 80013b6:	064d      	lsls	r5, r1, #25
 80013b8:	bf48      	it	mi
 80013ba:	b29b      	uxthmi	r3, r3
 80013bc:	e7ef      	b.n	800139e <_printf_i+0x14a>
 80013be:	4665      	mov	r5, ip
 80013c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80013c4:	fb02 3311 	mls	r3, r2, r1, r3
 80013c8:	5cc3      	ldrb	r3, [r0, r3]
 80013ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80013ce:	460b      	mov	r3, r1
 80013d0:	2900      	cmp	r1, #0
 80013d2:	d1f5      	bne.n	80013c0 <_printf_i+0x16c>
 80013d4:	e7b9      	b.n	800134a <_printf_i+0xf6>
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	6825      	ldr	r5, [r4, #0]
 80013da:	1d18      	adds	r0, r3, #4
 80013dc:	6961      	ldr	r1, [r4, #20]
 80013de:	6010      	str	r0, [r2, #0]
 80013e0:	0628      	lsls	r0, r5, #24
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	d501      	bpl.n	80013ea <_printf_i+0x196>
 80013e6:	6019      	str	r1, [r3, #0]
 80013e8:	e002      	b.n	80013f0 <_printf_i+0x19c>
 80013ea:	066a      	lsls	r2, r5, #25
 80013ec:	d5fb      	bpl.n	80013e6 <_printf_i+0x192>
 80013ee:	8019      	strh	r1, [r3, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	4665      	mov	r5, ip
 80013f4:	6123      	str	r3, [r4, #16]
 80013f6:	e7b9      	b.n	800136c <_printf_i+0x118>
 80013f8:	6813      	ldr	r3, [r2, #0]
 80013fa:	1d19      	adds	r1, r3, #4
 80013fc:	6011      	str	r1, [r2, #0]
 80013fe:	681d      	ldr	r5, [r3, #0]
 8001400:	6862      	ldr	r2, [r4, #4]
 8001402:	2100      	movs	r1, #0
 8001404:	4628      	mov	r0, r5
 8001406:	f000 f837 	bl	8001478 <memchr>
 800140a:	b108      	cbz	r0, 8001410 <_printf_i+0x1bc>
 800140c:	1b40      	subs	r0, r0, r5
 800140e:	6060      	str	r0, [r4, #4]
 8001410:	6863      	ldr	r3, [r4, #4]
 8001412:	6123      	str	r3, [r4, #16]
 8001414:	2300      	movs	r3, #0
 8001416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800141a:	e7a7      	b.n	800136c <_printf_i+0x118>
 800141c:	6923      	ldr	r3, [r4, #16]
 800141e:	462a      	mov	r2, r5
 8001420:	4639      	mov	r1, r7
 8001422:	4630      	mov	r0, r6
 8001424:	47c0      	blx	r8
 8001426:	3001      	adds	r0, #1
 8001428:	d0aa      	beq.n	8001380 <_printf_i+0x12c>
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	079b      	lsls	r3, r3, #30
 800142e:	d413      	bmi.n	8001458 <_printf_i+0x204>
 8001430:	68e0      	ldr	r0, [r4, #12]
 8001432:	9b03      	ldr	r3, [sp, #12]
 8001434:	4298      	cmp	r0, r3
 8001436:	bfb8      	it	lt
 8001438:	4618      	movlt	r0, r3
 800143a:	e7a3      	b.n	8001384 <_printf_i+0x130>
 800143c:	2301      	movs	r3, #1
 800143e:	464a      	mov	r2, r9
 8001440:	4639      	mov	r1, r7
 8001442:	4630      	mov	r0, r6
 8001444:	47c0      	blx	r8
 8001446:	3001      	adds	r0, #1
 8001448:	d09a      	beq.n	8001380 <_printf_i+0x12c>
 800144a:	3501      	adds	r5, #1
 800144c:	68e3      	ldr	r3, [r4, #12]
 800144e:	9a03      	ldr	r2, [sp, #12]
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	42ab      	cmp	r3, r5
 8001454:	dcf2      	bgt.n	800143c <_printf_i+0x1e8>
 8001456:	e7eb      	b.n	8001430 <_printf_i+0x1dc>
 8001458:	2500      	movs	r5, #0
 800145a:	f104 0919 	add.w	r9, r4, #25
 800145e:	e7f5      	b.n	800144c <_printf_i+0x1f8>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ac      	bne.n	80013be <_printf_i+0x16a>
 8001464:	7803      	ldrb	r3, [r0, #0]
 8001466:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800146a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800146e:	e76c      	b.n	800134a <_printf_i+0xf6>
 8001470:	08001704 	.word	0x08001704
 8001474:	08001715 	.word	0x08001715

08001478 <memchr>:
 8001478:	b510      	push	{r4, lr}
 800147a:	b2c9      	uxtb	r1, r1
 800147c:	4402      	add	r2, r0
 800147e:	4290      	cmp	r0, r2
 8001480:	4603      	mov	r3, r0
 8001482:	d101      	bne.n	8001488 <memchr+0x10>
 8001484:	2300      	movs	r3, #0
 8001486:	e003      	b.n	8001490 <memchr+0x18>
 8001488:	781c      	ldrb	r4, [r3, #0]
 800148a:	3001      	adds	r0, #1
 800148c:	428c      	cmp	r4, r1
 800148e:	d1f6      	bne.n	800147e <memchr+0x6>
 8001490:	4618      	mov	r0, r3
 8001492:	bd10      	pop	{r4, pc}

08001494 <memcpy>:
 8001494:	b510      	push	{r4, lr}
 8001496:	1e43      	subs	r3, r0, #1
 8001498:	440a      	add	r2, r1
 800149a:	4291      	cmp	r1, r2
 800149c:	d100      	bne.n	80014a0 <memcpy+0xc>
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014a8:	e7f7      	b.n	800149a <memcpy+0x6>

080014aa <memmove>:
 80014aa:	4288      	cmp	r0, r1
 80014ac:	b510      	push	{r4, lr}
 80014ae:	eb01 0302 	add.w	r3, r1, r2
 80014b2:	d807      	bhi.n	80014c4 <memmove+0x1a>
 80014b4:	1e42      	subs	r2, r0, #1
 80014b6:	4299      	cmp	r1, r3
 80014b8:	d00a      	beq.n	80014d0 <memmove+0x26>
 80014ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80014c2:	e7f8      	b.n	80014b6 <memmove+0xc>
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d9f5      	bls.n	80014b4 <memmove+0xa>
 80014c8:	1881      	adds	r1, r0, r2
 80014ca:	1ad2      	subs	r2, r2, r3
 80014cc:	42d3      	cmn	r3, r2
 80014ce:	d100      	bne.n	80014d2 <memmove+0x28>
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80014da:	e7f7      	b.n	80014cc <memmove+0x22>

080014dc <_free_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4605      	mov	r5, r0
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d043      	beq.n	800156c <_free_r+0x90>
 80014e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014e8:	1f0c      	subs	r4, r1, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	bfb8      	it	lt
 80014ee:	18e4      	addlt	r4, r4, r3
 80014f0:	f000 f8d0 	bl	8001694 <__malloc_lock>
 80014f4:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <_free_r+0x94>)
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	4610      	mov	r0, r2
 80014fa:	b933      	cbnz	r3, 800150a <_free_r+0x2e>
 80014fc:	6063      	str	r3, [r4, #4]
 80014fe:	6014      	str	r4, [r2, #0]
 8001500:	4628      	mov	r0, r5
 8001502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001506:	f000 b8c6 	b.w	8001696 <__malloc_unlock>
 800150a:	42a3      	cmp	r3, r4
 800150c:	d90b      	bls.n	8001526 <_free_r+0x4a>
 800150e:	6821      	ldr	r1, [r4, #0]
 8001510:	1862      	adds	r2, r4, r1
 8001512:	4293      	cmp	r3, r2
 8001514:	bf01      	itttt	eq
 8001516:	681a      	ldreq	r2, [r3, #0]
 8001518:	685b      	ldreq	r3, [r3, #4]
 800151a:	1852      	addeq	r2, r2, r1
 800151c:	6022      	streq	r2, [r4, #0]
 800151e:	6063      	str	r3, [r4, #4]
 8001520:	6004      	str	r4, [r0, #0]
 8001522:	e7ed      	b.n	8001500 <_free_r+0x24>
 8001524:	4613      	mov	r3, r2
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	b10a      	cbz	r2, 800152e <_free_r+0x52>
 800152a:	42a2      	cmp	r2, r4
 800152c:	d9fa      	bls.n	8001524 <_free_r+0x48>
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	1858      	adds	r0, r3, r1
 8001532:	42a0      	cmp	r0, r4
 8001534:	d10b      	bne.n	800154e <_free_r+0x72>
 8001536:	6820      	ldr	r0, [r4, #0]
 8001538:	4401      	add	r1, r0
 800153a:	1858      	adds	r0, r3, r1
 800153c:	4282      	cmp	r2, r0
 800153e:	6019      	str	r1, [r3, #0]
 8001540:	d1de      	bne.n	8001500 <_free_r+0x24>
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	6852      	ldr	r2, [r2, #4]
 8001546:	4401      	add	r1, r0
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	e7d8      	b.n	8001500 <_free_r+0x24>
 800154e:	d902      	bls.n	8001556 <_free_r+0x7a>
 8001550:	230c      	movs	r3, #12
 8001552:	602b      	str	r3, [r5, #0]
 8001554:	e7d4      	b.n	8001500 <_free_r+0x24>
 8001556:	6820      	ldr	r0, [r4, #0]
 8001558:	1821      	adds	r1, r4, r0
 800155a:	428a      	cmp	r2, r1
 800155c:	bf01      	itttt	eq
 800155e:	6811      	ldreq	r1, [r2, #0]
 8001560:	6852      	ldreq	r2, [r2, #4]
 8001562:	1809      	addeq	r1, r1, r0
 8001564:	6021      	streq	r1, [r4, #0]
 8001566:	6062      	str	r2, [r4, #4]
 8001568:	605c      	str	r4, [r3, #4]
 800156a:	e7c9      	b.n	8001500 <_free_r+0x24>
 800156c:	bd38      	pop	{r3, r4, r5, pc}
 800156e:	bf00      	nop
 8001570:	20000098 	.word	0x20000098

08001574 <_malloc_r>:
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	1ccd      	adds	r5, r1, #3
 8001578:	f025 0503 	bic.w	r5, r5, #3
 800157c:	3508      	adds	r5, #8
 800157e:	2d0c      	cmp	r5, #12
 8001580:	bf38      	it	cc
 8001582:	250c      	movcc	r5, #12
 8001584:	2d00      	cmp	r5, #0
 8001586:	4606      	mov	r6, r0
 8001588:	db01      	blt.n	800158e <_malloc_r+0x1a>
 800158a:	42a9      	cmp	r1, r5
 800158c:	d903      	bls.n	8001596 <_malloc_r+0x22>
 800158e:	230c      	movs	r3, #12
 8001590:	6033      	str	r3, [r6, #0]
 8001592:	2000      	movs	r0, #0
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	f000 f87d 	bl	8001694 <__malloc_lock>
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <_malloc_r+0xac>)
 800159c:	6814      	ldr	r4, [r2, #0]
 800159e:	4621      	mov	r1, r4
 80015a0:	b991      	cbnz	r1, 80015c8 <_malloc_r+0x54>
 80015a2:	4c20      	ldr	r4, [pc, #128]	; (8001624 <_malloc_r+0xb0>)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	b91b      	cbnz	r3, 80015b0 <_malloc_r+0x3c>
 80015a8:	4630      	mov	r0, r6
 80015aa:	f000 f863 	bl	8001674 <_sbrk_r>
 80015ae:	6020      	str	r0, [r4, #0]
 80015b0:	4629      	mov	r1, r5
 80015b2:	4630      	mov	r0, r6
 80015b4:	f000 f85e 	bl	8001674 <_sbrk_r>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d124      	bne.n	8001606 <_malloc_r+0x92>
 80015bc:	230c      	movs	r3, #12
 80015be:	4630      	mov	r0, r6
 80015c0:	6033      	str	r3, [r6, #0]
 80015c2:	f000 f868 	bl	8001696 <__malloc_unlock>
 80015c6:	e7e4      	b.n	8001592 <_malloc_r+0x1e>
 80015c8:	680b      	ldr	r3, [r1, #0]
 80015ca:	1b5b      	subs	r3, r3, r5
 80015cc:	d418      	bmi.n	8001600 <_malloc_r+0x8c>
 80015ce:	2b0b      	cmp	r3, #11
 80015d0:	d90f      	bls.n	80015f2 <_malloc_r+0x7e>
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	18cc      	adds	r4, r1, r3
 80015d6:	50cd      	str	r5, [r1, r3]
 80015d8:	4630      	mov	r0, r6
 80015da:	f000 f85c 	bl	8001696 <__malloc_unlock>
 80015de:	f104 000b 	add.w	r0, r4, #11
 80015e2:	1d23      	adds	r3, r4, #4
 80015e4:	f020 0007 	bic.w	r0, r0, #7
 80015e8:	1ac3      	subs	r3, r0, r3
 80015ea:	d0d3      	beq.n	8001594 <_malloc_r+0x20>
 80015ec:	425a      	negs	r2, r3
 80015ee:	50e2      	str	r2, [r4, r3]
 80015f0:	e7d0      	b.n	8001594 <_malloc_r+0x20>
 80015f2:	684b      	ldr	r3, [r1, #4]
 80015f4:	428c      	cmp	r4, r1
 80015f6:	bf16      	itet	ne
 80015f8:	6063      	strne	r3, [r4, #4]
 80015fa:	6013      	streq	r3, [r2, #0]
 80015fc:	460c      	movne	r4, r1
 80015fe:	e7eb      	b.n	80015d8 <_malloc_r+0x64>
 8001600:	460c      	mov	r4, r1
 8001602:	6849      	ldr	r1, [r1, #4]
 8001604:	e7cc      	b.n	80015a0 <_malloc_r+0x2c>
 8001606:	1cc4      	adds	r4, r0, #3
 8001608:	f024 0403 	bic.w	r4, r4, #3
 800160c:	42a0      	cmp	r0, r4
 800160e:	d005      	beq.n	800161c <_malloc_r+0xa8>
 8001610:	1a21      	subs	r1, r4, r0
 8001612:	4630      	mov	r0, r6
 8001614:	f000 f82e 	bl	8001674 <_sbrk_r>
 8001618:	3001      	adds	r0, #1
 800161a:	d0cf      	beq.n	80015bc <_malloc_r+0x48>
 800161c:	6025      	str	r5, [r4, #0]
 800161e:	e7db      	b.n	80015d8 <_malloc_r+0x64>
 8001620:	20000098 	.word	0x20000098
 8001624:	2000009c 	.word	0x2000009c

08001628 <_realloc_r>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	4607      	mov	r7, r0
 800162c:	4614      	mov	r4, r2
 800162e:	460e      	mov	r6, r1
 8001630:	b921      	cbnz	r1, 800163c <_realloc_r+0x14>
 8001632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001636:	4611      	mov	r1, r2
 8001638:	f7ff bf9c 	b.w	8001574 <_malloc_r>
 800163c:	b922      	cbnz	r2, 8001648 <_realloc_r+0x20>
 800163e:	f7ff ff4d 	bl	80014dc <_free_r>
 8001642:	4625      	mov	r5, r4
 8001644:	4628      	mov	r0, r5
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001648:	f000 f826 	bl	8001698 <_malloc_usable_size_r>
 800164c:	42a0      	cmp	r0, r4
 800164e:	d20f      	bcs.n	8001670 <_realloc_r+0x48>
 8001650:	4621      	mov	r1, r4
 8001652:	4638      	mov	r0, r7
 8001654:	f7ff ff8e 	bl	8001574 <_malloc_r>
 8001658:	4605      	mov	r5, r0
 800165a:	2800      	cmp	r0, #0
 800165c:	d0f2      	beq.n	8001644 <_realloc_r+0x1c>
 800165e:	4631      	mov	r1, r6
 8001660:	4622      	mov	r2, r4
 8001662:	f7ff ff17 	bl	8001494 <memcpy>
 8001666:	4631      	mov	r1, r6
 8001668:	4638      	mov	r0, r7
 800166a:	f7ff ff37 	bl	80014dc <_free_r>
 800166e:	e7e9      	b.n	8001644 <_realloc_r+0x1c>
 8001670:	4635      	mov	r5, r6
 8001672:	e7e7      	b.n	8001644 <_realloc_r+0x1c>

08001674 <_sbrk_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	2300      	movs	r3, #0
 8001678:	4c05      	ldr	r4, [pc, #20]	; (8001690 <_sbrk_r+0x1c>)
 800167a:	4605      	mov	r5, r0
 800167c:	4608      	mov	r0, r1
 800167e:	6023      	str	r3, [r4, #0]
 8001680:	f7ff f924 	bl	80008cc <_sbrk>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	d102      	bne.n	800168e <_sbrk_r+0x1a>
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	b103      	cbz	r3, 800168e <_sbrk_r+0x1a>
 800168c:	602b      	str	r3, [r5, #0]
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	200000e4 	.word	0x200000e4

08001694 <__malloc_lock>:
 8001694:	4770      	bx	lr

08001696 <__malloc_unlock>:
 8001696:	4770      	bx	lr

08001698 <_malloc_usable_size_r>:
 8001698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800169c:	1f18      	subs	r0, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bfbc      	itt	lt
 80016a2:	580b      	ldrlt	r3, [r1, r0]
 80016a4:	18c0      	addlt	r0, r0, r3
 80016a6:	4770      	bx	lr

080016a8 <_init>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	bf00      	nop
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr

080016b4 <_fini>:
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	bf00      	nop
 80016b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ba:	bc08      	pop	{r3}
 80016bc:	469e      	mov	lr, r3
 80016be:	4770      	bx	lr
