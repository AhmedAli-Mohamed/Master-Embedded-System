
DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000bf4  00000c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a6  008000a6  00000cce  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001451  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ddc  00000000  00000000  000038ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000046dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bec  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
#include "KEYPAD.h"

int main(void)
{
	LCD_INIT();
  92:	0e 94 21 02 	call	0x442	; 0x442 <LCD_INIT>
	KEYPAD_INIT();
  96:	0e 94 36 01 	call	0x26c	; 0x26c <KEYPAD_INIT>
	LCD_SEND_STR("asssssaaa");
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_SEND_STR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	9d ee       	ldi	r25, 0xED	; 237
  a6:	a2 e0       	ldi	r26, 0x02	; 2
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
	_delay_ms(120);
	LCD_SEND_STR("sddddddddddddffxxxxxxxxxxxxxxxxxxxfa");
  b4:	8a e6       	ldi	r24, 0x6A	; 106
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_SEND_STR>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x2a>

000000be <MCAL_GPIO_INIT>:
  @param [in]   -pinconf determine number and mode of pin
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_INIT(GPIO_TYPEDEF* GPIOX , GPIO_PINCONFIG* pinconf)
{
  be:	dc 01       	movw	r26, r24
  c0:	fb 01       	movw	r30, r22
	//CHECK IF MODE is OUTPUT
	if(pinconf->MODE == GPIO_MODE_OUTPUT)
  c2:	81 81       	ldd	r24, Z+1	; 0x01
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	81 f4       	brne	.+32     	; 0xe8 <MCAL_GPIO_INIT+0x2a>
	{
		SET_BIT(GPIOX->DDR , pinconf ->Pin_Number) ;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	00 80       	ld	r0, Z
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <MCAL_GPIO_INIT+0x16>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <MCAL_GPIO_INIT+0x12>
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	9c 91       	ld	r25, X
  dc:	11 97       	sbiw	r26, 0x01	; 1
  de:	89 2b       	or	r24, r25
  e0:	11 96       	adiw	r26, 0x01	; 1
  e2:	8c 93       	st	X, r24
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	08 95       	ret
	}
	else
	{
		//check if input is floating or pullup
		if(pinconf->MODE == GPIO_MODE_INPUT_PU)
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	79 f4       	brne	.+30     	; 0x10a <MCAL_GPIO_INIT+0x4c>
		{
			SET_BIT(GPIOX->PORT , pinconf ->Pin_Number) ;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	00 80       	ld	r0, Z
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <MCAL_GPIO_INIT+0x3a>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <MCAL_GPIO_INIT+0x36>
  fc:	12 96       	adiw	r26, 0x02	; 2
  fe:	9c 91       	ld	r25, X
 100:	12 97       	sbiw	r26, 0x02	; 2
 102:	89 2b       	or	r24, r25
 104:	12 96       	adiw	r26, 0x02	; 2
 106:	8c 93       	st	X, r24
 108:	12 97       	sbiw	r26, 0x02	; 2
		}
		RESET_BIT(GPIOX->DDR , pinconf ->Pin_Number) ;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	00 80       	ld	r0, Z
 110:	02 c0       	rjmp	.+4      	; 0x116 <MCAL_GPIO_INIT+0x58>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <MCAL_GPIO_INIT+0x54>
 11a:	80 95       	com	r24
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	9c 91       	ld	r25, X
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	89 23       	and	r24, r25
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	8c 93       	st	X, r24
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	08 95       	ret

0000012c <MCAL_GPIO_DEINIT>:
 * @retval 		-none
 * Note			-none
 */

void MCAL_GPIO_DEINIT(GPIO_TYPEDEF* GPIOX )
{
 12c:	fc 01       	movw	r30, r24
	GPIOX->DDR = 0X00;
 12e:	11 82       	std	Z+1, r1	; 0x01
	GPIOX->PORT = 0X00;
 130:	12 82       	std	Z+2, r1	; 0x02
	
}
 132:	08 95       	ret

00000134 <MCAL_GPIO_Readpin>:
 * @param [in]   -pinnumber determine number  of pin
 * @retval 		 -pin read
 * Note			-none
 */
uint8_t MCAL_GPIO_Readpin(GPIO_TYPEDEF* GPIOX , uint8_t pinnumber)
{
 134:	fc 01       	movw	r30, r24
	uint8_t pinread;
	pinread = READ_BIT(GPIOX->PIN , pinnumber);
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	c9 01       	movw	r24, r18
 13c:	06 2e       	mov	r0, r22
 13e:	02 c0       	rjmp	.+4      	; 0x144 <MCAL_GPIO_Readpin+0x10>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <MCAL_GPIO_Readpin+0xc>
 148:	20 81       	ld	r18, Z
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	82 23       	and	r24, r18
 14e:	93 23       	and	r25, r19
 150:	02 c0       	rjmp	.+4      	; 0x156 <MCAL_GPIO_Readpin+0x22>
 152:	95 95       	asr	r25
 154:	87 95       	ror	r24
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <MCAL_GPIO_Readpin+0x1e>
	return pinread;
}
 15a:	08 95       	ret

0000015c <MCAL_GPIO_Readport>:
uint8_t MCAL_GPIO_Readport(GPIO_TYPEDEF* GPIOX )
{
	uint8_t portread;
	portread = GPIOX->PIN ;
	return portread;
}
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	08 95       	ret

00000162 <MCAL_GPIO_Writepin>:
 * @param [in]   -value determine value pin
 * @retval 		 -none
 * Note			-none			-none
 */
void MCAL_GPIO_Writepin(GPIO_TYPEDEF* GPIOX , uint8_t pinnumber,uint8_t value)
{
 162:	fc 01       	movw	r30, r24
	if(value == 1)
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	69 f4       	brne	.+26     	; 0x182 <MCAL_GPIO_Writepin+0x20>
	{
		SET_BIT(GPIOX->PORT , pinnumber);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9c 01       	movw	r18, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <MCAL_GPIO_Writepin+0x12>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <MCAL_GPIO_Writepin+0xe>
 178:	b9 01       	movw	r22, r18
 17a:	82 81       	ldd	r24, Z+2	; 0x02
 17c:	68 2b       	or	r22, r24
 17e:	62 83       	std	Z+2, r22	; 0x02
 180:	08 95       	ret
	}
	else
	{
		RESET_BIT(GPIOX->PORT , pinnumber);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9c 01       	movw	r18, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <MCAL_GPIO_Writepin+0x2c>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <MCAL_GPIO_Writepin+0x28>
 192:	b9 01       	movw	r22, r18
 194:	60 95       	com	r22
 196:	82 81       	ldd	r24, Z+2	; 0x02
 198:	68 23       	and	r22, r24
 19a:	62 83       	std	Z+2, r22	; 0x02
 19c:	08 95       	ret

0000019e <MCAL_GPIO_Writeport>:
 * @retval 		 -none
 * Note			-none
 */
void MCAL_GPIO_Writeport(GPIO_TYPEDEF* GPIOX ,uint8_t value )
{
	GPIOX->PORT = value ;
 19e:	fc 01       	movw	r30, r24
 1a0:	62 83       	std	Z+2, r22	; 0x02
}
 1a2:	08 95       	ret

000001a4 <MCAL_GPIO_Togglepin>:
 * @param [in]   -value determine value pin
 * @retval 		 -none
 * Note			-none			-none
 */
void MCAL_GPIO_Togglepin(GPIO_TYPEDEF* GPIOX , uint8_t pinnumber)
{
 1a4:	fc 01       	movw	r30, r24
	TOGGLE_BIT(GPIOX->PORT , pinnumber) ;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 01       	movw	r18, r24
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <MCAL_GPIO_Togglepin+0xe>
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <MCAL_GPIO_Togglepin+0xa>
 1b6:	b9 01       	movw	r22, r18
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	68 27       	eor	r22, r24
 1bc:	62 83       	std	Z+2, r22	; 0x02
}
 1be:	08 95       	ret

000001c0 <MCAL_GPIO_WriteNibble>:

void MCAL_GPIO_WriteNibble(GPIO_TYPEDEF* GPIOX ,uint8_t value , uint8_t pos)
{
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	7c 01       	movw	r14, r24
	uint8_t i;
	if(pos == LOW_Nible)
 1d2:	44 23       	and	r20, r20
 1d4:	01 f5       	brne	.+64     	; 0x216 <MCAL_GPIO_WriteNibble+0x56>
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(i=0; i<= 3 ; i++)
		{
			MCAL_GPIO_Writepin(GPIOX , i , READ_BIT(value , i));
 1da:	01 e0       	ldi	r16, 0x01	; 1
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	c6 2e       	mov	r12, r22
 1e0:	dd 24       	eor	r13, r13
 1e2:	c8 01       	movw	r24, r16
 1e4:	0c 2e       	mov	r0, r28
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <MCAL_GPIO_WriteNibble+0x2c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <MCAL_GPIO_WriteNibble+0x28>
 1f0:	8c 21       	and	r24, r12
 1f2:	9d 21       	and	r25, r13
 1f4:	9c 01       	movw	r18, r24
 1f6:	0c 2e       	mov	r0, r28
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MCAL_GPIO_WriteNibble+0x3e>
 1fa:	35 95       	asr	r19
 1fc:	27 95       	ror	r18
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MCAL_GPIO_WriteNibble+0x3a>
 202:	a9 01       	movw	r20, r18
 204:	c7 01       	movw	r24, r14
 206:	6c 2f       	mov	r22, r28
 208:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
 20c:	21 96       	adiw	r28, 0x01	; 1
void MCAL_GPIO_WriteNibble(GPIO_TYPEDEF* GPIOX ,uint8_t value , uint8_t pos)
{
	uint8_t i;
	if(pos == LOW_Nible)
	{
		for(i=0; i<= 3 ; i++)
 20e:	c4 30       	cpi	r28, 0x04	; 4
 210:	d1 05       	cpc	r29, r1
 212:	39 f7       	brne	.-50     	; 0x1e2 <MCAL_GPIO_WriteNibble+0x22>
 214:	22 c0       	rjmp	.+68     	; 0x25a <MCAL_GPIO_WriteNibble+0x9a>
		{
			MCAL_GPIO_Writepin(GPIOX , i , READ_BIT(value , i));
		} 
	}
	if(pos == HIGH_Nibble)
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	01 f5       	brne	.+64     	; 0x25a <MCAL_GPIO_WriteNibble+0x9a>
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(i=0; i<= 3 ; i++)
		{
	    	MCAL_GPIO_Writepin(GPIOX , i+4 , READ_BIT(value , i));
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	c6 2e       	mov	r12, r22
 224:	dd 24       	eor	r13, r13
void MCAL_GPIO_Togglepin(GPIO_TYPEDEF* GPIOX , uint8_t pinnumber)
{
	TOGGLE_BIT(GPIOX->PORT , pinnumber) ;
}

void MCAL_GPIO_WriteNibble(GPIO_TYPEDEF* GPIOX ,uint8_t value , uint8_t pos)
 226:	6c 2f       	mov	r22, r28
 228:	6c 5f       	subi	r22, 0xFC	; 252
	}
	if(pos == HIGH_Nibble)
	{
		for(i=0; i<= 3 ; i++)
		{
	    	MCAL_GPIO_Writepin(GPIOX , i+4 , READ_BIT(value , i));
 22a:	c8 01       	movw	r24, r16
 22c:	0c 2e       	mov	r0, r28
 22e:	02 c0       	rjmp	.+4      	; 0x234 <MCAL_GPIO_WriteNibble+0x74>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <MCAL_GPIO_WriteNibble+0x70>
 238:	8c 21       	and	r24, r12
 23a:	9d 21       	and	r25, r13
 23c:	9c 01       	movw	r18, r24
 23e:	0c 2e       	mov	r0, r28
 240:	02 c0       	rjmp	.+4      	; 0x246 <MCAL_GPIO_WriteNibble+0x86>
 242:	35 95       	asr	r19
 244:	27 95       	ror	r18
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <MCAL_GPIO_WriteNibble+0x82>
 24a:	a9 01       	movw	r20, r18
 24c:	c7 01       	movw	r24, r14
 24e:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
 252:	21 96       	adiw	r28, 0x01	; 1
			MCAL_GPIO_Writepin(GPIOX , i , READ_BIT(value , i));
		} 
	}
	if(pos == HIGH_Nibble)
	{
		for(i=0; i<= 3 ; i++)
 254:	c4 30       	cpi	r28, 0x04	; 4
 256:	d1 05       	cpc	r29, r1
 258:	31 f7       	brne	.-52     	; 0x226 <MCAL_GPIO_WriteNibble+0x66>
		{
	    	MCAL_GPIO_Writepin(GPIOX , i+4 , READ_BIT(value , i));
		}
	}
	
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	df 90       	pop	r13
 268:	cf 90       	pop	r12
 26a:	08 95       	ret

0000026c <KEYPAD_INIT>:
 *  Author: ahmed
 */ 
#include "KEYPAD.h"

void KEYPAD_INIT()
{
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <KEYPAD_INIT+0xa>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	GPIO_PINCONFIG pinconf;
	for(i=0 ; i<=3 ; i++)
 27a:	10 e0       	ldi	r17, 0x00	; 0
	{
		pinconf.Pin_Number = i;
		pinconf.MODE = GPIO_MODE_OUTPUT;
 27c:	01 e0       	ldi	r16, 0x01	; 1
{
	uint8_t i;
	GPIO_PINCONFIG pinconf;
	for(i=0 ; i<=3 ; i++)
	{
		pinconf.Pin_Number = i;
 27e:	19 83       	std	Y+1, r17	; 0x01
		pinconf.MODE = GPIO_MODE_OUTPUT;
 280:	0a 83       	std	Y+2, r16	; 0x02
		MCAL_GPIO_INIT(KEYPAD_DATAPORT , &pinconf);
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_INIT>

void KEYPAD_INIT()
{
	uint8_t i;
	GPIO_PINCONFIG pinconf;
	for(i=0 ; i<=3 ; i++)
 290:	1f 5f       	subi	r17, 0xFF	; 255
 292:	14 30       	cpi	r17, 0x04	; 4
 294:	a1 f7       	brne	.-24     	; 0x27e <KEYPAD_INIT+0x12>
		MCAL_GPIO_INIT(KEYPAD_DATAPORT , &pinconf);
	}
	for(i=4 ; i<=7 ; i++)
	{
		pinconf.Pin_Number = i;
		pinconf.MODE = GPIO_MODE_INPUT_PU;
 296:	02 e0       	ldi	r16, 0x02	; 2
		pinconf.MODE = GPIO_MODE_OUTPUT;
		MCAL_GPIO_INIT(KEYPAD_DATAPORT , &pinconf);
	}
	for(i=4 ; i<=7 ; i++)
	{
		pinconf.Pin_Number = i;
 298:	19 83       	std	Y+1, r17	; 0x01
		pinconf.MODE = GPIO_MODE_INPUT_PU;
 29a:	0a 83       	std	Y+2, r16	; 0x02
		MCAL_GPIO_INIT(KEYPAD_DATAPORT ,& pinconf);
 29c:	80 e3       	ldi	r24, 0x30	; 48
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_INIT>
	{
		pinconf.Pin_Number = i;
		pinconf.MODE = GPIO_MODE_OUTPUT;
		MCAL_GPIO_INIT(KEYPAD_DATAPORT , &pinconf);
	}
	for(i=4 ; i<=7 ; i++)
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	18 30       	cpi	r17, 0x08	; 8
 2ae:	a1 f7       	brne	.-24     	; 0x298 <KEYPAD_INIT+0x2c>
		pinconf.Pin_Number = i;
		pinconf.MODE = GPIO_MODE_INPUT_PU;
		MCAL_GPIO_INIT(KEYPAD_DATAPORT ,& pinconf);
	}
	
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <KEYPAD_READ>:

uint8_t KEYPAD_READ()
{
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	60 97       	sbiw	r28, 0x10	; 16
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 2da:	de 01       	movw	r26, r28
 2dc:	11 96       	adiw	r26, 0x01	; 1
 2de:	ef e8       	ldi	r30, 0x8F	; 143
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 e1       	ldi	r24, 0x10	; 16
 2e4:	01 90       	ld	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <KEYPAD_READ+0x26>
 2ec:	ee 24       	eor	r14, r14
 2ee:	ff 24       	eor	r15, r15
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_1 , 1);
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_2 , 1);
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_3 , 1);
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , row , 0);
		
		for(col =4 ; col <= 7 ; col++)
 2f0:	04 e0       	ldi	r16, 0x04	; 4
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8_t row,col,return_val = 0xff;
	
	for(row = 0 ;row <= 3 ; row++)
	{
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_0 , 1);
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_1 , 1);
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_2 , 1);
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_3 , 1);
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , row , 0);
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	6e 2d       	mov	r22, r14
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
		
		for(col =4 ; col <= 7 ; col++)
 32e:	10 2f       	mov	r17, r16
		{
			
			if(MCAL_GPIO_Readpin(KEYPAD_DATAPORT , col) == 0)
 330:	80 e3       	ldi	r24, 0x30	; 48
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	61 2f       	mov	r22, r17
 336:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_GPIO_Readpin>
 33a:	88 23       	and	r24, r24
 33c:	91 f4       	brne	.+36     	; 0x362 <KEYPAD_READ+0xa4>
			{
				return_val = arr[row][col-4];
 33e:	f7 01       	movw	r30, r14
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	8c 0f       	add	r24, r28
 34e:	9d 1f       	adc	r25, r29
 350:	e8 0f       	add	r30, r24
 352:	f9 1f       	adc	r31, r25
 354:	e1 0f       	add	r30, r17
 356:	f1 1d       	adc	r31, r1
 358:	34 97       	sbiw	r30, 0x04	; 4
 35a:	80 81       	ld	r24, Z
				break;
			}
		}
		if(return_val != 0xff)
 35c:	8f 3f       	cpi	r24, 0xFF	; 255
 35e:	21 f0       	breq	.+8      	; 0x368 <KEYPAD_READ+0xaa>
 360:	0c c0       	rjmp	.+24     	; 0x37a <KEYPAD_READ+0xbc>
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_1 , 1);
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_2 , 1);
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , GPIO_PIN_3 , 1);
		MCAL_GPIO_Writepin(KEYPAD_DATAPORT , row , 0);
		
		for(col =4 ; col <= 7 ; col++)
 362:	1f 5f       	subi	r17, 0xFF	; 255
 364:	18 30       	cpi	r17, 0x08	; 8
 366:	21 f7       	brne	.-56     	; 0x330 <KEYPAD_READ+0x72>
 368:	08 94       	sec
 36a:	e1 1c       	adc	r14, r1
 36c:	f1 1c       	adc	r15, r1
uint8_t KEYPAD_READ()
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8_t row,col,return_val = 0xff;
	
	for(row = 0 ;row <= 3 ; row++)
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	e9 16       	cp	r14, r25
 372:	f1 04       	cpc	r15, r1
 374:	09 f0       	breq	.+2      	; 0x378 <KEYPAD_READ+0xba>
 376:	bd cf       	rjmp	.-134    	; 0x2f2 <KEYPAD_READ+0x34>
 378:	8f ef       	ldi	r24, 0xFF	; 255
		break;
		
	}
	
	return return_val;				
 37a:	60 96       	adiw	r28, 0x10	; 16
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	08 95       	ret

00000394 <ENABLE_sig>:
// counter to handle printing string on lcd
uint8_t counter;

void ENABLE_sig()
{
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_EN , 1 );
 394:	86 e3       	ldi	r24, 0x36	; 54
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
 3a0:	8f e5       	ldi	r24, 0x5F	; 95
 3a2:	9a ee       	ldi	r25, 0xEA	; 234
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <ENABLE_sig+0x10>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <ENABLE_sig+0x16>
 3aa:	00 00       	nop
	_delay_ms(30);
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_EN , 0 );
 3ac:	86 e3       	ldi	r24, 0x36	; 54
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
 3b8:	8f e5       	ldi	r24, 0x5F	; 95
 3ba:	9a ee       	ldi	r25, 0xEA	; 234
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <ENABLE_sig+0x28>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <ENABLE_sig+0x2e>
 3c2:	00 00       	nop
	_delay_ms(30);
	
}
 3c4:	08 95       	ret

000003c6 <LCD_SEND_COMMAND>:
	
	
}

void LCD_SEND_COMMAND(uint8_t comm)
{
 3c6:	cf 93       	push	r28
 3c8:	c8 2f       	mov	r28, r24
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RS , 0 );
 3ca:	86 e3       	ldi	r24, 0x36	; 54
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RW , 0 );
 3d6:	86 e3       	ldi	r24, 0x36	; 54
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
	
	
	#if defined EIGHTBIT_MODE
	MCAL_GPIO_Writeport(LCD_DATAPORT , comm);
 3e2:	89 e3       	ldi	r24, 0x39	; 57
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	6c 2f       	mov	r22, r28
 3e8:	0e 94 cf 00 	call	0x19e	; 0x19e <MCAL_GPIO_Writeport>
	ENABLE_sig();
 3ec:	0e 94 ca 01 	call	0x394	; 0x394 <ENABLE_sig>
 3f0:	8f ec       	ldi	r24, 0xCF	; 207
 3f2:	97 e0       	ldi	r25, 0x07	; 7
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_SEND_COMMAND+0x2e>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_SEND_COMMAND+0x34>
 3fa:	00 00       	nop
	_delay_ms(1);
	MCAL_GPIO_WriteNibble(LCD_DATAPORT , comm , PIN_POS);
	ENABLE_sig();
	_delay_ms(1);
	#endif
}
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <LCD_SEND_CHAR>:

void LCD_SEND_CHAR(uint8_t data)
{
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RS , 1 );
 404:	86 e3       	ldi	r24, 0x36	; 54
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_RW , 0 );
 410:	86 e3       	ldi	r24, 0x36	; 54
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	0e 94 b1 00 	call	0x162	; 0x162 <MCAL_GPIO_Writepin>
	#if defined EIGHTBIT_MODE
	MCAL_GPIO_Writeport(LCD_DATAPORT , data);
 41c:	89 e3       	ldi	r24, 0x39	; 57
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	6c 2f       	mov	r22, r28
 422:	0e 94 cf 00 	call	0x19e	; 0x19e <MCAL_GPIO_Writeport>
	ENABLE_sig();
 426:	0e 94 ca 01 	call	0x394	; 0x394 <ENABLE_sig>
	ENABLE_sig();
	MCAL_GPIO_WriteNibble(LCD_DATAPORT , data , PIN_POS);
	ENABLE_sig();
	
	#endif
}
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <LCD_CLEAR_SCREEN>:
		}
	}
}
void LCD_CLEAR_SCREEN(void)
{
	LCD_SEND_COMMAND(LCD_CLEAR);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
 434:	8f e1       	ldi	r24, 0x1F	; 31
 436:	9e e4       	ldi	r25, 0x4E	; 78
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <LCD_CLEAR_SCREEN+0xa>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <LCD_CLEAR_SCREEN+0x10>
 43e:	00 00       	nop
	_delay_ms(10);
}
 440:	08 95       	ret

00000442 <LCD_INIT>:
	MCAL_GPIO_Writepin(LCD_CTRLPORT ,LCD_EN , 0 );
	_delay_ms(30);
	
}
void LCD_INIT(void)
{
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	00 d0       	rcall	.+0      	; 0x44a <LCD_INIT+0x8>
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
	// initialize control pins
	GPIO_PINCONFIG pinconf;
	pinconf.Pin_Number = LCD_EN ;
 44e:	19 82       	std	Y+1, r1	; 0x01
	pinconf.MODE = GPIO_MODE_OUTPUT;
 450:	11 e0       	ldi	r17, 0x01	; 1
 452:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT(LCD_CTRLPORT ,& pinconf);
 454:	86 e3       	ldi	r24, 0x36	; 54
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	be 01       	movw	r22, r28
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_INIT>
	pinconf.Pin_Number = LCD_RS ;
 462:	19 83       	std	Y+1, r17	; 0x01
	pinconf.MODE = GPIO_MODE_OUTPUT;
 464:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT(LCD_CTRLPORT , &pinconf);
 466:	86 e3       	ldi	r24, 0x36	; 54
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_INIT>
	pinconf.Pin_Number = LCD_RW ;
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	89 83       	std	Y+1, r24	; 0x01
	pinconf.MODE = GPIO_MODE_OUTPUT;
 478:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT(LCD_CTRLPORT ,& pinconf);
 47a:	86 e3       	ldi	r24, 0x36	; 54
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	be 01       	movw	r22, r28
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_INIT>
	
	#if defined EIGHTBIT_MODE
	LCD_DATAPORT ->DDR = 0xff;
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	8a bb       	out	0x1a, r24	; 26
	
	LCD_SEND_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 48c:	88 e3       	ldi	r24, 0x38	; 56
 48e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
	LCD_SEND_COMMAND(LCD_DISP_ON_CURSOR);
 492:	8e e0       	ldi	r24, 0x0E	; 14
 494:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
	LCD_CLEAR_SCREEN();
 498:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_CLEAR_SCREEN>
	LCD_SEND_COMMAND(LCD_ENTRY_MODE);
 49c:	86 e0       	ldi	r24, 0x06	; 6
 49e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
		
	
	#endif
	
	
}
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	08 95       	ret

000004ae <LCD_MOVE_CURSOR>:
{
	LCD_SEND_COMMAND(LCD_CLEAR);
	_delay_ms(10);
}
void LCD_MOVE_CURSOR(uint8_t row , uint8_t col)
{
 4ae:	cf 93       	push	r28
 4b0:	c6 2f       	mov	r28, r22
	if (row <1 || row >2 || col < 1 || col >16)
 4b2:	98 2f       	mov	r25, r24
 4b4:	91 50       	subi	r25, 0x01	; 1
 4b6:	92 30       	cpi	r25, 0x02	; 2
 4b8:	20 f4       	brcc	.+8      	; 0x4c2 <LCD_MOVE_CURSOR+0x14>
 4ba:	66 23       	and	r22, r22
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <LCD_MOVE_CURSOR+0x14>
 4be:	61 31       	cpi	r22, 0x11	; 17
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <LCD_MOVE_CURSOR+0x1c>
	{
		LCD_SEND_COMMAND(0x80);
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <LCD_MOVE_CURSOR+0x40>
	}
	else if (row == 1)
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	39 f4       	brne	.+14     	; 0x4dc <LCD_MOVE_CURSOR+0x2e>
	{
		LCD_SEND_COMMAND(0x80 + col -1);
 4ce:	86 2f       	mov	r24, r22
 4d0:	81 58       	subi	r24, 0x81	; 129
 4d2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
		counter = col;
 4d6:	c0 93 a6 00 	sts	0x00A6, r28
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <LCD_MOVE_CURSOR+0x40>
	}
	else if (row == 2)
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	39 f4       	brne	.+14     	; 0x4ee <LCD_MOVE_CURSOR+0x40>
	{
		LCD_SEND_COMMAND(0xc0 + col -1);
 4e0:	86 2f       	mov	r24, r22
 4e2:	81 54       	subi	r24, 0x41	; 65
 4e4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SEND_COMMAND>
		counter = col + 16;
 4e8:	c0 5f       	subi	r28, 0xF0	; 240
 4ea:	c0 93 a6 00 	sts	0x00A6, r28
	}
}
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <LCD_SEND_STR>:
	
	#endif
}

void LCD_SEND_STR(uint8_t * data)
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	c8 2f       	mov	r28, r24
 4f8:	d9 2f       	mov	r29, r25
	while(*data != 0)
 4fa:	15 c0       	rjmp	.+42     	; 0x526 <LCD_SEND_STR+0x34>
	{
		LCD_SEND_CHAR(*data);
 4fc:	0e 94 00 02 	call	0x400	; 0x400 <LCD_SEND_CHAR>
		data ++;
		counter ++;
 500:	80 91 a6 00 	lds	r24, 0x00A6
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	80 93 a6 00 	sts	0x00A6, r24
		if (counter == 16)
 50a:	80 31       	cpi	r24, 0x10	; 16
 50c:	21 f4       	brne	.+8      	; 0x516 <LCD_SEND_STR+0x24>
		{
			LCD_MOVE_CURSOR(2,1);
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_MOVE_CURSOR>
		}
		if (counter == 32)
 516:	80 91 a6 00 	lds	r24, 0x00A6
 51a:	80 32       	cpi	r24, 0x20	; 32
 51c:	21 f4       	brne	.+8      	; 0x526 <LCD_SEND_STR+0x34>
		{
			LCD_CLEAR_SCREEN();
 51e:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_CLEAR_SCREEN>
			counter = 0;
 522:	10 92 a6 00 	sts	0x00A6, r1
	#endif
}

void LCD_SEND_STR(uint8_t * data)
{
	while(*data != 0)
 526:	89 91       	ld	r24, Y+
 528:	88 23       	and	r24, r24
 52a:	41 f7       	brne	.-48     	; 0x4fc <LCD_SEND_STR+0xa>
		{
			LCD_CLEAR_SCREEN();
			counter = 0;
		}
	}
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <LCD_SEND_INT>:
		counter = col + 16;
	}
}

void LCD_SEND_INT(uint32_t data)
{
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	29 97       	sbiw	r28, 0x09	; 9
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	dc 01       	movw	r26, r24
 54c:	cb 01       	movw	r24, r22
	char str[9];
	sprintf(str , "%d" , data);
 54e:	2d b7       	in	r18, 0x3d	; 61
 550:	3e b7       	in	r19, 0x3e	; 62
 552:	28 50       	subi	r18, 0x08	; 8
 554:	30 40       	sbci	r19, 0x00	; 0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	3e bf       	out	0x3e, r19	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	2d bf       	out	0x3d, r18	; 61
 560:	4d b7       	in	r20, 0x3d	; 61
 562:	5e b7       	in	r21, 0x3e	; 62
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	8e 01       	movw	r16, r28
 56a:	0f 5f       	subi	r16, 0xFF	; 255
 56c:	1f 4f       	sbci	r17, 0xFF	; 255
 56e:	ed b7       	in	r30, 0x3d	; 61
 570:	fe b7       	in	r31, 0x3e	; 62
 572:	12 83       	std	Z+2, r17	; 0x02
 574:	01 83       	std	Z+1, r16	; 0x01
 576:	2f e9       	ldi	r18, 0x9F	; 159
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	fa 01       	movw	r30, r20
 57c:	33 83       	std	Z+3, r19	; 0x03
 57e:	22 83       	std	Z+2, r18	; 0x02
 580:	84 83       	std	Z+4, r24	; 0x04
 582:	95 83       	std	Z+5, r25	; 0x05
 584:	a6 83       	std	Z+6, r26	; 0x06
 586:	b7 83       	std	Z+7, r27	; 0x07
 588:	0e 94 21 03 	call	0x642	; 0x642 <sprintf>
	LCD_SEND_STR(str);
 58c:	2d b7       	in	r18, 0x3d	; 61
 58e:	3e b7       	in	r19, 0x3e	; 62
 590:	28 5f       	subi	r18, 0xF8	; 248
 592:	3f 4f       	sbci	r19, 0xFF	; 255
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	3e bf       	out	0x3e, r19	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	2d bf       	out	0x3d, r18	; 61
 59e:	c8 01       	movw	r24, r16
 5a0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_SEND_STR>
}
 5a4:	29 96       	adiw	r28, 0x09	; 9
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	08 95       	ret

000005ba <LCD_SEND_FLOAT>:
void LCD_SEND_FLOAT(float data)
{
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	29 97       	sbiw	r28, 0x09	; 9
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
 5d2:	dc 01       	movw	r26, r24
 5d4:	cb 01       	movw	r24, r22
	char str[9];
	sprintf(str , "%f" , data);
 5d6:	2d b7       	in	r18, 0x3d	; 61
 5d8:	3e b7       	in	r19, 0x3e	; 62
 5da:	28 50       	subi	r18, 0x08	; 8
 5dc:	30 40       	sbci	r19, 0x00	; 0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	3e bf       	out	0x3e, r19	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	2d bf       	out	0x3d, r18	; 61
 5e8:	4d b7       	in	r20, 0x3d	; 61
 5ea:	5e b7       	in	r21, 0x3e	; 62
 5ec:	4f 5f       	subi	r20, 0xFF	; 255
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	8e 01       	movw	r16, r28
 5f2:	0f 5f       	subi	r16, 0xFF	; 255
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	ed b7       	in	r30, 0x3d	; 61
 5f8:	fe b7       	in	r31, 0x3e	; 62
 5fa:	12 83       	std	Z+2, r17	; 0x02
 5fc:	01 83       	std	Z+1, r16	; 0x01
 5fe:	22 ea       	ldi	r18, 0xA2	; 162
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	fa 01       	movw	r30, r20
 604:	33 83       	std	Z+3, r19	; 0x03
 606:	22 83       	std	Z+2, r18	; 0x02
 608:	84 83       	std	Z+4, r24	; 0x04
 60a:	95 83       	std	Z+5, r25	; 0x05
 60c:	a6 83       	std	Z+6, r26	; 0x06
 60e:	b7 83       	std	Z+7, r27	; 0x07
 610:	0e 94 21 03 	call	0x642	; 0x642 <sprintf>
	LCD_SEND_STR(str);
 614:	2d b7       	in	r18, 0x3d	; 61
 616:	3e b7       	in	r19, 0x3e	; 62
 618:	28 5f       	subi	r18, 0xF8	; 248
 61a:	3f 4f       	sbci	r19, 0xFF	; 255
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	3e bf       	out	0x3e, r19	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	2d bf       	out	0x3d, r18	; 61
 626:	c8 01       	movw	r24, r16
 628:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_SEND_STR>
}
 62c:	29 96       	adiw	r28, 0x09	; 9
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	08 95       	ret

00000642 <sprintf>:
 642:	ae e0       	ldi	r26, 0x0E	; 14
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e7 e2       	ldi	r30, 0x27	; 39
 648:	f3 e0       	ldi	r31, 0x03	; 3
 64a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__prologue_saves__+0x1c>
 64e:	0d 89       	ldd	r16, Y+21	; 0x15
 650:	1e 89       	ldd	r17, Y+22	; 0x16
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	8c 83       	std	Y+4, r24	; 0x04
 656:	1a 83       	std	Y+2, r17	; 0x02
 658:	09 83       	std	Y+1, r16	; 0x01
 65a:	8f ef       	ldi	r24, 0xFF	; 255
 65c:	9f e7       	ldi	r25, 0x7F	; 127
 65e:	9e 83       	std	Y+6, r25	; 0x06
 660:	8d 83       	std	Y+5, r24	; 0x05
 662:	ae 01       	movw	r20, r28
 664:	47 5e       	subi	r20, 0xE7	; 231
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	ce 01       	movw	r24, r28
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	6f 89       	ldd	r22, Y+23	; 0x17
 66e:	78 8d       	ldd	r23, Y+24	; 0x18
 670:	0e 94 43 03 	call	0x686	; 0x686 <vfprintf>
 674:	ef 81       	ldd	r30, Y+7	; 0x07
 676:	f8 85       	ldd	r31, Y+8	; 0x08
 678:	e0 0f       	add	r30, r16
 67a:	f1 1f       	adc	r31, r17
 67c:	10 82       	st	Z, r1
 67e:	2e 96       	adiw	r28, 0x0e	; 14
 680:	e4 e0       	ldi	r30, 0x04	; 4
 682:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__epilogue_restores__+0x1c>

00000686 <vfprintf>:
 686:	ad e0       	ldi	r26, 0x0D	; 13
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 e4       	ldi	r30, 0x49	; 73
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__prologue_saves__>
 692:	3c 01       	movw	r6, r24
 694:	7d 87       	std	Y+13, r23	; 0x0d
 696:	6c 87       	std	Y+12, r22	; 0x0c
 698:	5a 01       	movw	r10, r20
 69a:	fc 01       	movw	r30, r24
 69c:	17 82       	std	Z+7, r1	; 0x07
 69e:	16 82       	std	Z+6, r1	; 0x06
 6a0:	83 81       	ldd	r24, Z+3	; 0x03
 6a2:	81 ff       	sbrs	r24, 1
 6a4:	c8 c1       	rjmp	.+912    	; 0xa36 <__stack+0x1d7>
 6a6:	2e 01       	movw	r4, r28
 6a8:	08 94       	sec
 6aa:	41 1c       	adc	r4, r1
 6ac:	51 1c       	adc	r5, r1
 6ae:	f3 01       	movw	r30, r6
 6b0:	93 81       	ldd	r25, Z+3	; 0x03
 6b2:	ec 85       	ldd	r30, Y+12	; 0x0c
 6b4:	fd 85       	ldd	r31, Y+13	; 0x0d
 6b6:	93 fd       	sbrc	r25, 3
 6b8:	85 91       	lpm	r24, Z+
 6ba:	93 ff       	sbrs	r25, 3
 6bc:	81 91       	ld	r24, Z+
 6be:	fd 87       	std	Y+13, r31	; 0x0d
 6c0:	ec 87       	std	Y+12, r30	; 0x0c
 6c2:	88 23       	and	r24, r24
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <vfprintf+0x42>
 6c6:	b3 c1       	rjmp	.+870    	; 0xa2e <__stack+0x1cf>
 6c8:	85 32       	cpi	r24, 0x25	; 37
 6ca:	41 f4       	brne	.+16     	; 0x6dc <vfprintf+0x56>
 6cc:	93 fd       	sbrc	r25, 3
 6ce:	85 91       	lpm	r24, Z+
 6d0:	93 ff       	sbrs	r25, 3
 6d2:	81 91       	ld	r24, Z+
 6d4:	fd 87       	std	Y+13, r31	; 0x0d
 6d6:	ec 87       	std	Y+12, r30	; 0x0c
 6d8:	85 32       	cpi	r24, 0x25	; 37
 6da:	29 f4       	brne	.+10     	; 0x6e6 <vfprintf+0x60>
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	b3 01       	movw	r22, r6
 6e0:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 6e4:	e4 cf       	rjmp	.-56     	; 0x6ae <vfprintf+0x28>
 6e6:	ff 24       	eor	r15, r15
 6e8:	ee 24       	eor	r14, r14
 6ea:	10 e0       	ldi	r17, 0x00	; 0
 6ec:	10 32       	cpi	r17, 0x20	; 32
 6ee:	b0 f4       	brcc	.+44     	; 0x71c <vfprintf+0x96>
 6f0:	8b 32       	cpi	r24, 0x2B	; 43
 6f2:	69 f0       	breq	.+26     	; 0x70e <vfprintf+0x88>
 6f4:	8c 32       	cpi	r24, 0x2C	; 44
 6f6:	28 f4       	brcc	.+10     	; 0x702 <vfprintf+0x7c>
 6f8:	80 32       	cpi	r24, 0x20	; 32
 6fa:	51 f0       	breq	.+20     	; 0x710 <vfprintf+0x8a>
 6fc:	83 32       	cpi	r24, 0x23	; 35
 6fe:	71 f4       	brne	.+28     	; 0x71c <vfprintf+0x96>
 700:	0b c0       	rjmp	.+22     	; 0x718 <vfprintf+0x92>
 702:	8d 32       	cpi	r24, 0x2D	; 45
 704:	39 f0       	breq	.+14     	; 0x714 <vfprintf+0x8e>
 706:	80 33       	cpi	r24, 0x30	; 48
 708:	49 f4       	brne	.+18     	; 0x71c <vfprintf+0x96>
 70a:	11 60       	ori	r17, 0x01	; 1
 70c:	2c c0       	rjmp	.+88     	; 0x766 <vfprintf+0xe0>
 70e:	12 60       	ori	r17, 0x02	; 2
 710:	14 60       	ori	r17, 0x04	; 4
 712:	29 c0       	rjmp	.+82     	; 0x766 <vfprintf+0xe0>
 714:	18 60       	ori	r17, 0x08	; 8
 716:	27 c0       	rjmp	.+78     	; 0x766 <vfprintf+0xe0>
 718:	10 61       	ori	r17, 0x10	; 16
 71a:	25 c0       	rjmp	.+74     	; 0x766 <vfprintf+0xe0>
 71c:	17 fd       	sbrc	r17, 7
 71e:	2e c0       	rjmp	.+92     	; 0x77c <vfprintf+0xf6>
 720:	28 2f       	mov	r18, r24
 722:	20 53       	subi	r18, 0x30	; 48
 724:	2a 30       	cpi	r18, 0x0A	; 10
 726:	98 f4       	brcc	.+38     	; 0x74e <vfprintf+0xc8>
 728:	16 ff       	sbrs	r17, 6
 72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0xb6>
 72c:	8f 2d       	mov	r24, r15
 72e:	88 0f       	add	r24, r24
 730:	f8 2e       	mov	r15, r24
 732:	ff 0c       	add	r15, r15
 734:	ff 0c       	add	r15, r15
 736:	f8 0e       	add	r15, r24
 738:	f2 0e       	add	r15, r18
 73a:	15 c0       	rjmp	.+42     	; 0x766 <vfprintf+0xe0>
 73c:	8e 2d       	mov	r24, r14
 73e:	88 0f       	add	r24, r24
 740:	e8 2e       	mov	r14, r24
 742:	ee 0c       	add	r14, r14
 744:	ee 0c       	add	r14, r14
 746:	e8 0e       	add	r14, r24
 748:	e2 0e       	add	r14, r18
 74a:	10 62       	ori	r17, 0x20	; 32
 74c:	0c c0       	rjmp	.+24     	; 0x766 <vfprintf+0xe0>
 74e:	8e 32       	cpi	r24, 0x2E	; 46
 750:	21 f4       	brne	.+8      	; 0x75a <vfprintf+0xd4>
 752:	16 fd       	sbrc	r17, 6
 754:	6c c1       	rjmp	.+728    	; 0xa2e <__stack+0x1cf>
 756:	10 64       	ori	r17, 0x40	; 64
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0xe0>
 75a:	8c 36       	cpi	r24, 0x6C	; 108
 75c:	11 f4       	brne	.+4      	; 0x762 <vfprintf+0xdc>
 75e:	10 68       	ori	r17, 0x80	; 128
 760:	02 c0       	rjmp	.+4      	; 0x766 <vfprintf+0xe0>
 762:	88 36       	cpi	r24, 0x68	; 104
 764:	59 f4       	brne	.+22     	; 0x77c <vfprintf+0xf6>
 766:	ec 85       	ldd	r30, Y+12	; 0x0c
 768:	fd 85       	ldd	r31, Y+13	; 0x0d
 76a:	93 fd       	sbrc	r25, 3
 76c:	85 91       	lpm	r24, Z+
 76e:	93 ff       	sbrs	r25, 3
 770:	81 91       	ld	r24, Z+
 772:	fd 87       	std	Y+13, r31	; 0x0d
 774:	ec 87       	std	Y+12, r30	; 0x0c
 776:	88 23       	and	r24, r24
 778:	09 f0       	breq	.+2      	; 0x77c <vfprintf+0xf6>
 77a:	b8 cf       	rjmp	.-144    	; 0x6ec <vfprintf+0x66>
 77c:	98 2f       	mov	r25, r24
 77e:	95 54       	subi	r25, 0x45	; 69
 780:	93 30       	cpi	r25, 0x03	; 3
 782:	18 f0       	brcs	.+6      	; 0x78a <vfprintf+0x104>
 784:	90 52       	subi	r25, 0x20	; 32
 786:	93 30       	cpi	r25, 0x03	; 3
 788:	38 f4       	brcc	.+14     	; 0x798 <vfprintf+0x112>
 78a:	24 e0       	ldi	r18, 0x04	; 4
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	a2 0e       	add	r10, r18
 790:	b3 1e       	adc	r11, r19
 792:	3f e3       	ldi	r19, 0x3F	; 63
 794:	39 83       	std	Y+1, r19	; 0x01
 796:	0f c0       	rjmp	.+30     	; 0x7b6 <vfprintf+0x130>
 798:	83 36       	cpi	r24, 0x63	; 99
 79a:	31 f0       	breq	.+12     	; 0x7a8 <vfprintf+0x122>
 79c:	83 37       	cpi	r24, 0x73	; 115
 79e:	81 f0       	breq	.+32     	; 0x7c0 <vfprintf+0x13a>
 7a0:	83 35       	cpi	r24, 0x53	; 83
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <vfprintf+0x120>
 7a4:	5a c0       	rjmp	.+180    	; 0x85a <vfprintf+0x1d4>
 7a6:	22 c0       	rjmp	.+68     	; 0x7ec <vfprintf+0x166>
 7a8:	f5 01       	movw	r30, r10
 7aa:	80 81       	ld	r24, Z
 7ac:	89 83       	std	Y+1, r24	; 0x01
 7ae:	22 e0       	ldi	r18, 0x02	; 2
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	a2 0e       	add	r10, r18
 7b4:	b3 1e       	adc	r11, r19
 7b6:	21 e0       	ldi	r18, 0x01	; 1
 7b8:	c2 2e       	mov	r12, r18
 7ba:	d1 2c       	mov	r13, r1
 7bc:	42 01       	movw	r8, r4
 7be:	14 c0       	rjmp	.+40     	; 0x7e8 <vfprintf+0x162>
 7c0:	92 e0       	ldi	r25, 0x02	; 2
 7c2:	29 2e       	mov	r2, r25
 7c4:	31 2c       	mov	r3, r1
 7c6:	2a 0c       	add	r2, r10
 7c8:	3b 1c       	adc	r3, r11
 7ca:	f5 01       	movw	r30, r10
 7cc:	80 80       	ld	r8, Z
 7ce:	91 80       	ldd	r9, Z+1	; 0x01
 7d0:	16 ff       	sbrs	r17, 6
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <vfprintf+0x154>
 7d4:	6f 2d       	mov	r22, r15
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x158>
 7da:	6f ef       	ldi	r22, 0xFF	; 255
 7dc:	7f ef       	ldi	r23, 0xFF	; 255
 7de:	c4 01       	movw	r24, r8
 7e0:	0e 94 2c 05 	call	0xa58	; 0xa58 <strnlen>
 7e4:	6c 01       	movw	r12, r24
 7e6:	51 01       	movw	r10, r2
 7e8:	1f 77       	andi	r17, 0x7F	; 127
 7ea:	15 c0       	rjmp	.+42     	; 0x816 <vfprintf+0x190>
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	28 2e       	mov	r2, r24
 7f0:	31 2c       	mov	r3, r1
 7f2:	2a 0c       	add	r2, r10
 7f4:	3b 1c       	adc	r3, r11
 7f6:	f5 01       	movw	r30, r10
 7f8:	80 80       	ld	r8, Z
 7fa:	91 80       	ldd	r9, Z+1	; 0x01
 7fc:	16 ff       	sbrs	r17, 6
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <vfprintf+0x180>
 800:	6f 2d       	mov	r22, r15
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <vfprintf+0x184>
 806:	6f ef       	ldi	r22, 0xFF	; 255
 808:	7f ef       	ldi	r23, 0xFF	; 255
 80a:	c4 01       	movw	r24, r8
 80c:	0e 94 21 05 	call	0xa42	; 0xa42 <strnlen_P>
 810:	6c 01       	movw	r12, r24
 812:	10 68       	ori	r17, 0x80	; 128
 814:	51 01       	movw	r10, r2
 816:	13 fd       	sbrc	r17, 3
 818:	1c c0       	rjmp	.+56     	; 0x852 <vfprintf+0x1cc>
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0x1a2>
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	b3 01       	movw	r22, r6
 822:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 826:	ea 94       	dec	r14
 828:	8e 2d       	mov	r24, r14
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	c8 16       	cp	r12, r24
 82e:	d9 06       	cpc	r13, r25
 830:	a8 f3       	brcs	.-22     	; 0x81c <vfprintf+0x196>
 832:	0f c0       	rjmp	.+30     	; 0x852 <vfprintf+0x1cc>
 834:	f4 01       	movw	r30, r8
 836:	17 fd       	sbrc	r17, 7
 838:	85 91       	lpm	r24, Z+
 83a:	17 ff       	sbrs	r17, 7
 83c:	81 91       	ld	r24, Z+
 83e:	4f 01       	movw	r8, r30
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	b3 01       	movw	r22, r6
 844:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 848:	e1 10       	cpse	r14, r1
 84a:	ea 94       	dec	r14
 84c:	08 94       	sec
 84e:	c1 08       	sbc	r12, r1
 850:	d1 08       	sbc	r13, r1
 852:	c1 14       	cp	r12, r1
 854:	d1 04       	cpc	r13, r1
 856:	71 f7       	brne	.-36     	; 0x834 <vfprintf+0x1ae>
 858:	e7 c0       	rjmp	.+462    	; 0xa28 <__stack+0x1c9>
 85a:	84 36       	cpi	r24, 0x64	; 100
 85c:	11 f0       	breq	.+4      	; 0x862 <__stack+0x3>
 85e:	89 36       	cpi	r24, 0x69	; 105
 860:	51 f5       	brne	.+84     	; 0x8b6 <__stack+0x57>
 862:	f5 01       	movw	r30, r10
 864:	17 ff       	sbrs	r17, 7
 866:	07 c0       	rjmp	.+14     	; 0x876 <__stack+0x17>
 868:	80 81       	ld	r24, Z
 86a:	91 81       	ldd	r25, Z+1	; 0x01
 86c:	a2 81       	ldd	r26, Z+2	; 0x02
 86e:	b3 81       	ldd	r27, Z+3	; 0x03
 870:	24 e0       	ldi	r18, 0x04	; 4
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	08 c0       	rjmp	.+16     	; 0x886 <__stack+0x27>
 876:	80 81       	ld	r24, Z
 878:	91 81       	ldd	r25, Z+1	; 0x01
 87a:	aa 27       	eor	r26, r26
 87c:	97 fd       	sbrc	r25, 7
 87e:	a0 95       	com	r26
 880:	ba 2f       	mov	r27, r26
 882:	22 e0       	ldi	r18, 0x02	; 2
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	a2 0e       	add	r10, r18
 888:	b3 1e       	adc	r11, r19
 88a:	01 2f       	mov	r16, r17
 88c:	0f 76       	andi	r16, 0x6F	; 111
 88e:	b7 ff       	sbrs	r27, 7
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <__stack+0x43>
 892:	b0 95       	com	r27
 894:	a0 95       	com	r26
 896:	90 95       	com	r25
 898:	81 95       	neg	r24
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	af 4f       	sbci	r26, 0xFF	; 255
 89e:	bf 4f       	sbci	r27, 0xFF	; 255
 8a0:	00 68       	ori	r16, 0x80	; 128
 8a2:	bc 01       	movw	r22, r24
 8a4:	cd 01       	movw	r24, r26
 8a6:	a2 01       	movw	r20, r4
 8a8:	2a e0       	ldi	r18, 0x0A	; 10
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	0e 94 63 05 	call	0xac6	; 0xac6 <__ultoa_invert>
 8b0:	d8 2e       	mov	r13, r24
 8b2:	d4 18       	sub	r13, r4
 8b4:	3f c0       	rjmp	.+126    	; 0x934 <__stack+0xd5>
 8b6:	85 37       	cpi	r24, 0x75	; 117
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <__stack+0x63>
 8ba:	1f 7e       	andi	r17, 0xEF	; 239
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	20 c0       	rjmp	.+64     	; 0x902 <__stack+0xa3>
 8c2:	19 7f       	andi	r17, 0xF9	; 249
 8c4:	8f 36       	cpi	r24, 0x6F	; 111
 8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__stack+0x93>
 8c8:	80 37       	cpi	r24, 0x70	; 112
 8ca:	20 f4       	brcc	.+8      	; 0x8d4 <__stack+0x75>
 8cc:	88 35       	cpi	r24, 0x58	; 88
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__stack+0x73>
 8d0:	ae c0       	rjmp	.+348    	; 0xa2e <__stack+0x1cf>
 8d2:	0b c0       	rjmp	.+22     	; 0x8ea <__stack+0x8b>
 8d4:	80 37       	cpi	r24, 0x70	; 112
 8d6:	21 f0       	breq	.+8      	; 0x8e0 <__stack+0x81>
 8d8:	88 37       	cpi	r24, 0x78	; 120
 8da:	09 f0       	breq	.+2      	; 0x8de <__stack+0x7f>
 8dc:	a8 c0       	rjmp	.+336    	; 0xa2e <__stack+0x1cf>
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__stack+0x83>
 8e0:	10 61       	ori	r17, 0x10	; 16
 8e2:	14 ff       	sbrs	r17, 4
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__stack+0x99>
 8e6:	14 60       	ori	r17, 0x04	; 4
 8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <__stack+0x99>
 8ea:	14 ff       	sbrs	r17, 4
 8ec:	08 c0       	rjmp	.+16     	; 0x8fe <__stack+0x9f>
 8ee:	16 60       	ori	r17, 0x06	; 6
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <__stack+0x9f>
 8f2:	28 e0       	ldi	r18, 0x08	; 8
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <__stack+0xa3>
 8f8:	20 e1       	ldi	r18, 0x10	; 16
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
 8fe:	20 e1       	ldi	r18, 0x10	; 16
 900:	32 e0       	ldi	r19, 0x02	; 2
 902:	f5 01       	movw	r30, r10
 904:	17 ff       	sbrs	r17, 7
 906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0xb7>
 908:	60 81       	ld	r22, Z
 90a:	71 81       	ldd	r23, Z+1	; 0x01
 90c:	82 81       	ldd	r24, Z+2	; 0x02
 90e:	93 81       	ldd	r25, Z+3	; 0x03
 910:	44 e0       	ldi	r20, 0x04	; 4
 912:	50 e0       	ldi	r21, 0x00	; 0
 914:	06 c0       	rjmp	.+12     	; 0x922 <__stack+0xc3>
 916:	60 81       	ld	r22, Z
 918:	71 81       	ldd	r23, Z+1	; 0x01
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	42 e0       	ldi	r20, 0x02	; 2
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	a4 0e       	add	r10, r20
 924:	b5 1e       	adc	r11, r21
 926:	a2 01       	movw	r20, r4
 928:	0e 94 63 05 	call	0xac6	; 0xac6 <__ultoa_invert>
 92c:	d8 2e       	mov	r13, r24
 92e:	d4 18       	sub	r13, r4
 930:	01 2f       	mov	r16, r17
 932:	0f 77       	andi	r16, 0x7F	; 127
 934:	06 ff       	sbrs	r16, 6
 936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0xeb>
 938:	0e 7f       	andi	r16, 0xFE	; 254
 93a:	df 14       	cp	r13, r15
 93c:	30 f4       	brcc	.+12     	; 0x94a <__stack+0xeb>
 93e:	04 ff       	sbrs	r16, 4
 940:	06 c0       	rjmp	.+12     	; 0x94e <__stack+0xef>
 942:	02 fd       	sbrc	r16, 2
 944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0xef>
 946:	0f 7e       	andi	r16, 0xEF	; 239
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0xef>
 94a:	1d 2d       	mov	r17, r13
 94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0xf1>
 94e:	1f 2d       	mov	r17, r15
 950:	80 2f       	mov	r24, r16
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	04 ff       	sbrs	r16, 4
 956:	0c c0       	rjmp	.+24     	; 0x970 <__stack+0x111>
 958:	fe 01       	movw	r30, r28
 95a:	ed 0d       	add	r30, r13
 95c:	f1 1d       	adc	r31, r1
 95e:	20 81       	ld	r18, Z
 960:	20 33       	cpi	r18, 0x30	; 48
 962:	11 f4       	brne	.+4      	; 0x968 <__stack+0x109>
 964:	09 7e       	andi	r16, 0xE9	; 233
 966:	09 c0       	rjmp	.+18     	; 0x97a <__stack+0x11b>
 968:	02 ff       	sbrs	r16, 2
 96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x119>
 96c:	1e 5f       	subi	r17, 0xFE	; 254
 96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x11b>
 970:	86 78       	andi	r24, 0x86	; 134
 972:	90 70       	andi	r25, 0x00	; 0
 974:	00 97       	sbiw	r24, 0x00	; 0
 976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x11b>
 978:	1f 5f       	subi	r17, 0xFF	; 255
 97a:	80 2e       	mov	r8, r16
 97c:	99 24       	eor	r9, r9
 97e:	03 fd       	sbrc	r16, 3
 980:	12 c0       	rjmp	.+36     	; 0x9a6 <__stack+0x147>
 982:	00 ff       	sbrs	r16, 0
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <__stack+0x141>
 986:	fd 2c       	mov	r15, r13
 988:	1e 15       	cp	r17, r14
 98a:	50 f4       	brcc	.+20     	; 0x9a0 <__stack+0x141>
 98c:	fe 0c       	add	r15, r14
 98e:	f1 1a       	sub	r15, r17
 990:	1e 2d       	mov	r17, r14
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <__stack+0x141>
 994:	80 e2       	ldi	r24, 0x20	; 32
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	b3 01       	movw	r22, r6
 99a:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 99e:	1f 5f       	subi	r17, 0xFF	; 255
 9a0:	1e 15       	cp	r17, r14
 9a2:	c0 f3       	brcs	.-16     	; 0x994 <__stack+0x135>
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__stack+0x14f>
 9a6:	1e 15       	cp	r17, r14
 9a8:	10 f4       	brcc	.+4      	; 0x9ae <__stack+0x14f>
 9aa:	e1 1a       	sub	r14, r17
 9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <__stack+0x151>
 9ae:	ee 24       	eor	r14, r14
 9b0:	84 fe       	sbrs	r8, 4
 9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <__stack+0x173>
 9b4:	80 e3       	ldi	r24, 0x30	; 48
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	b3 01       	movw	r22, r6
 9ba:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 9be:	82 fe       	sbrs	r8, 2
 9c0:	1f c0       	rjmp	.+62     	; 0xa00 <__stack+0x1a1>
 9c2:	81 fe       	sbrs	r8, 1
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__stack+0x16d>
 9c6:	88 e5       	ldi	r24, 0x58	; 88
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	10 c0       	rjmp	.+32     	; 0x9ec <__stack+0x18d>
 9cc:	88 e7       	ldi	r24, 0x78	; 120
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <__stack+0x18d>
 9d2:	c4 01       	movw	r24, r8
 9d4:	86 78       	andi	r24, 0x86	; 134
 9d6:	90 70       	andi	r25, 0x00	; 0
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	91 f0       	breq	.+36     	; 0xa00 <__stack+0x1a1>
 9dc:	81 fc       	sbrc	r8, 1
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0x185>
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__stack+0x187>
 9e4:	8b e2       	ldi	r24, 0x2B	; 43
 9e6:	07 fd       	sbrc	r16, 7
 9e8:	8d e2       	ldi	r24, 0x2D	; 45
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	b3 01       	movw	r22, r6
 9ee:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 9f2:	06 c0       	rjmp	.+12     	; 0xa00 <__stack+0x1a1>
 9f4:	80 e3       	ldi	r24, 0x30	; 48
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	b3 01       	movw	r22, r6
 9fa:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 9fe:	fa 94       	dec	r15
 a00:	df 14       	cp	r13, r15
 a02:	c0 f3       	brcs	.-16     	; 0x9f4 <__stack+0x195>
 a04:	da 94       	dec	r13
 a06:	f2 01       	movw	r30, r4
 a08:	ed 0d       	add	r30, r13
 a0a:	f1 1d       	adc	r31, r1
 a0c:	80 81       	ld	r24, Z
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	b3 01       	movw	r22, r6
 a12:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 a16:	dd 20       	and	r13, r13
 a18:	a9 f7       	brne	.-22     	; 0xa04 <__stack+0x1a5>
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <__stack+0x1c9>
 a1c:	80 e2       	ldi	r24, 0x20	; 32
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	b3 01       	movw	r22, r6
 a22:	0e 94 37 05 	call	0xa6e	; 0xa6e <fputc>
 a26:	ea 94       	dec	r14
 a28:	ee 20       	and	r14, r14
 a2a:	c1 f7       	brne	.-16     	; 0xa1c <__stack+0x1bd>
 a2c:	40 ce       	rjmp	.-896    	; 0x6ae <vfprintf+0x28>
 a2e:	f3 01       	movw	r30, r6
 a30:	86 81       	ldd	r24, Z+6	; 0x06
 a32:	97 81       	ldd	r25, Z+7	; 0x07
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <__stack+0x1db>
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	2d 96       	adiw	r28, 0x0d	; 13
 a3c:	e2 e1       	ldi	r30, 0x12	; 18
 a3e:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__epilogue_restores__>

00000a42 <strnlen_P>:
 a42:	fc 01       	movw	r30, r24
 a44:	05 90       	lpm	r0, Z+
 a46:	61 50       	subi	r22, 0x01	; 1
 a48:	70 40       	sbci	r23, 0x00	; 0
 a4a:	01 10       	cpse	r0, r1
 a4c:	d8 f7       	brcc	.-10     	; 0xa44 <strnlen_P+0x2>
 a4e:	80 95       	com	r24
 a50:	90 95       	com	r25
 a52:	8e 0f       	add	r24, r30
 a54:	9f 1f       	adc	r25, r31
 a56:	08 95       	ret

00000a58 <strnlen>:
 a58:	fc 01       	movw	r30, r24
 a5a:	61 50       	subi	r22, 0x01	; 1
 a5c:	70 40       	sbci	r23, 0x00	; 0
 a5e:	01 90       	ld	r0, Z+
 a60:	01 10       	cpse	r0, r1
 a62:	d8 f7       	brcc	.-10     	; 0xa5a <strnlen+0x2>
 a64:	80 95       	com	r24
 a66:	90 95       	com	r25
 a68:	8e 0f       	add	r24, r30
 a6a:	9f 1f       	adc	r25, r31
 a6c:	08 95       	ret

00000a6e <fputc>:
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	8c 01       	movw	r16, r24
 a78:	eb 01       	movw	r28, r22
 a7a:	8b 81       	ldd	r24, Y+3	; 0x03
 a7c:	81 ff       	sbrs	r24, 1
 a7e:	1b c0       	rjmp	.+54     	; 0xab6 <fputc+0x48>
 a80:	82 ff       	sbrs	r24, 2
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <fputc+0x30>
 a84:	2e 81       	ldd	r18, Y+6	; 0x06
 a86:	3f 81       	ldd	r19, Y+7	; 0x07
 a88:	8c 81       	ldd	r24, Y+4	; 0x04
 a8a:	9d 81       	ldd	r25, Y+5	; 0x05
 a8c:	28 17       	cp	r18, r24
 a8e:	39 07       	cpc	r19, r25
 a90:	64 f4       	brge	.+24     	; 0xaaa <fputc+0x3c>
 a92:	e8 81       	ld	r30, Y
 a94:	f9 81       	ldd	r31, Y+1	; 0x01
 a96:	01 93       	st	Z+, r16
 a98:	f9 83       	std	Y+1, r31	; 0x01
 a9a:	e8 83       	st	Y, r30
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <fputc+0x3c>
 a9e:	e8 85       	ldd	r30, Y+8	; 0x08
 aa0:	f9 85       	ldd	r31, Y+9	; 0x09
 aa2:	80 2f       	mov	r24, r16
 aa4:	09 95       	icall
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	31 f4       	brne	.+12     	; 0xab6 <fputc+0x48>
 aaa:	8e 81       	ldd	r24, Y+6	; 0x06
 aac:	9f 81       	ldd	r25, Y+7	; 0x07
 aae:	01 96       	adiw	r24, 0x01	; 1
 ab0:	9f 83       	std	Y+7, r25	; 0x07
 ab2:	8e 83       	std	Y+6, r24	; 0x06
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <fputc+0x4c>
 ab6:	0f ef       	ldi	r16, 0xFF	; 255
 ab8:	1f ef       	ldi	r17, 0xFF	; 255
 aba:	c8 01       	movw	r24, r16
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <__ultoa_invert>:
 ac6:	fa 01       	movw	r30, r20
 ac8:	aa 27       	eor	r26, r26
 aca:	28 30       	cpi	r18, 0x08	; 8
 acc:	51 f1       	breq	.+84     	; 0xb22 <__ultoa_invert+0x5c>
 ace:	20 31       	cpi	r18, 0x10	; 16
 ad0:	81 f1       	breq	.+96     	; 0xb32 <__ultoa_invert+0x6c>
 ad2:	e8 94       	clt
 ad4:	6f 93       	push	r22
 ad6:	6e 7f       	andi	r22, 0xFE	; 254
 ad8:	6e 5f       	subi	r22, 0xFE	; 254
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	af 4f       	sbci	r26, 0xFF	; 255
 ae2:	b1 e0       	ldi	r27, 0x01	; 1
 ae4:	3e d0       	rcall	.+124    	; 0xb62 <__ultoa_invert+0x9c>
 ae6:	b4 e0       	ldi	r27, 0x04	; 4
 ae8:	3c d0       	rcall	.+120    	; 0xb62 <__ultoa_invert+0x9c>
 aea:	67 0f       	add	r22, r23
 aec:	78 1f       	adc	r23, r24
 aee:	89 1f       	adc	r24, r25
 af0:	9a 1f       	adc	r25, r26
 af2:	a1 1d       	adc	r26, r1
 af4:	68 0f       	add	r22, r24
 af6:	79 1f       	adc	r23, r25
 af8:	8a 1f       	adc	r24, r26
 afa:	91 1d       	adc	r25, r1
 afc:	a1 1d       	adc	r26, r1
 afe:	6a 0f       	add	r22, r26
 b00:	71 1d       	adc	r23, r1
 b02:	81 1d       	adc	r24, r1
 b04:	91 1d       	adc	r25, r1
 b06:	a1 1d       	adc	r26, r1
 b08:	20 d0       	rcall	.+64     	; 0xb4a <__ultoa_invert+0x84>
 b0a:	09 f4       	brne	.+2      	; 0xb0e <__ultoa_invert+0x48>
 b0c:	68 94       	set
 b0e:	3f 91       	pop	r19
 b10:	2a e0       	ldi	r18, 0x0A	; 10
 b12:	26 9f       	mul	r18, r22
 b14:	11 24       	eor	r1, r1
 b16:	30 19       	sub	r19, r0
 b18:	30 5d       	subi	r19, 0xD0	; 208
 b1a:	31 93       	st	Z+, r19
 b1c:	de f6       	brtc	.-74     	; 0xad4 <__ultoa_invert+0xe>
 b1e:	cf 01       	movw	r24, r30
 b20:	08 95       	ret
 b22:	46 2f       	mov	r20, r22
 b24:	47 70       	andi	r20, 0x07	; 7
 b26:	40 5d       	subi	r20, 0xD0	; 208
 b28:	41 93       	st	Z+, r20
 b2a:	b3 e0       	ldi	r27, 0x03	; 3
 b2c:	0f d0       	rcall	.+30     	; 0xb4c <__ultoa_invert+0x86>
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__ultoa_invert+0x5c>
 b30:	f6 cf       	rjmp	.-20     	; 0xb1e <__ultoa_invert+0x58>
 b32:	46 2f       	mov	r20, r22
 b34:	4f 70       	andi	r20, 0x0F	; 15
 b36:	40 5d       	subi	r20, 0xD0	; 208
 b38:	4a 33       	cpi	r20, 0x3A	; 58
 b3a:	18 f0       	brcs	.+6      	; 0xb42 <__ultoa_invert+0x7c>
 b3c:	49 5d       	subi	r20, 0xD9	; 217
 b3e:	31 fd       	sbrc	r19, 1
 b40:	40 52       	subi	r20, 0x20	; 32
 b42:	41 93       	st	Z+, r20
 b44:	02 d0       	rcall	.+4      	; 0xb4a <__ultoa_invert+0x84>
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__ultoa_invert+0x6c>
 b48:	ea cf       	rjmp	.-44     	; 0xb1e <__ultoa_invert+0x58>
 b4a:	b4 e0       	ldi	r27, 0x04	; 4
 b4c:	a6 95       	lsr	r26
 b4e:	97 95       	ror	r25
 b50:	87 95       	ror	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__ultoa_invert+0x86>
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	61 05       	cpc	r22, r1
 b5e:	71 05       	cpc	r23, r1
 b60:	08 95       	ret
 b62:	9b 01       	movw	r18, r22
 b64:	ac 01       	movw	r20, r24
 b66:	0a 2e       	mov	r0, r26
 b68:	06 94       	lsr	r0
 b6a:	57 95       	ror	r21
 b6c:	47 95       	ror	r20
 b6e:	37 95       	ror	r19
 b70:	27 95       	ror	r18
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__ultoa_invert+0xa2>
 b76:	62 0f       	add	r22, r18
 b78:	73 1f       	adc	r23, r19
 b7a:	84 1f       	adc	r24, r20
 b7c:	95 1f       	adc	r25, r21
 b7e:	a0 1d       	adc	r26, r0
 b80:	08 95       	ret

00000b82 <__prologue_saves__>:
 b82:	2f 92       	push	r2
 b84:	3f 92       	push	r3
 b86:	4f 92       	push	r4
 b88:	5f 92       	push	r5
 b8a:	6f 92       	push	r6
 b8c:	7f 92       	push	r7
 b8e:	8f 92       	push	r8
 b90:	9f 92       	push	r9
 b92:	af 92       	push	r10
 b94:	bf 92       	push	r11
 b96:	cf 92       	push	r12
 b98:	df 92       	push	r13
 b9a:	ef 92       	push	r14
 b9c:	ff 92       	push	r15
 b9e:	0f 93       	push	r16
 ba0:	1f 93       	push	r17
 ba2:	cf 93       	push	r28
 ba4:	df 93       	push	r29
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	ca 1b       	sub	r28, r26
 bac:	db 0b       	sbc	r29, r27
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	f8 94       	cli
 bb2:	de bf       	out	0x3e, r29	; 62
 bb4:	0f be       	out	0x3f, r0	; 63
 bb6:	cd bf       	out	0x3d, r28	; 61
 bb8:	09 94       	ijmp

00000bba <__epilogue_restores__>:
 bba:	2a 88       	ldd	r2, Y+18	; 0x12
 bbc:	39 88       	ldd	r3, Y+17	; 0x11
 bbe:	48 88       	ldd	r4, Y+16	; 0x10
 bc0:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc2:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc4:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc6:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc8:	9b 84       	ldd	r9, Y+11	; 0x0b
 bca:	aa 84       	ldd	r10, Y+10	; 0x0a
 bcc:	b9 84       	ldd	r11, Y+9	; 0x09
 bce:	c8 84       	ldd	r12, Y+8	; 0x08
 bd0:	df 80       	ldd	r13, Y+7	; 0x07
 bd2:	ee 80       	ldd	r14, Y+6	; 0x06
 bd4:	fd 80       	ldd	r15, Y+5	; 0x05
 bd6:	0c 81       	ldd	r16, Y+4	; 0x04
 bd8:	1b 81       	ldd	r17, Y+3	; 0x03
 bda:	aa 81       	ldd	r26, Y+2	; 0x02
 bdc:	b9 81       	ldd	r27, Y+1	; 0x01
 bde:	ce 0f       	add	r28, r30
 be0:	d1 1d       	adc	r29, r1
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	f8 94       	cli
 be6:	de bf       	out	0x3e, r29	; 62
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	cd bf       	out	0x3d, r28	; 61
 bec:	ed 01       	movw	r28, r26
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
