
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000047e  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000133  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035c  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012c  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_1>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_2>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>

int main(void)
{
	//Gpio init
	DDRD |= (1<<5);
  92:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1<<6);
  94:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1<<7);
  96:	8f 9a       	sbi	0x11, 7	; 17
	//INT0_INIT
	MCUCR |=(1<<ISC00);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8b bf       	out	0x3b, r24	; 59
	//INT1_INIT
	MCUCR |=(1<<ISC10);
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);
  aa:	8b b7       	in	r24, 0x3b	; 59
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8b bf       	out	0x3b, r24	; 59
	//INT2_INIT
	MCUCSR |=(1<<ISC2);
  b0:	84 b7       	in	r24, 0x34	; 52
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT2);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8b bf       	out	0x3b, r24	; 59
	sei();
  bc:	78 94       	sei
    while(1)
    {
		PORTD &= ~(1<<5);
  be:	95 98       	cbi	0x12, 5	; 18
        PORTD &= ~(1<<6);
  c0:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1<<7);
  c2:	97 98       	cbi	0x12, 7	; 18
  c4:	fc cf       	rjmp	.-8      	; 0xbe <main+0x2c>

000000c6 <__vector_1>:
    }
}
ISR(INT0_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
	PORTD |= (1<<5);
  d8:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	99 e6       	ldi	r25, 0x69	; 105
  de:	a8 e1       	ldi	r26, 0x18	; 24
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	a0 40       	sbci	r26, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__vector_1+0x1a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_1+0x24>
  ea:	00 00       	nop
	_delay_ms(1000);
}
  ec:	bf 91       	pop	r27
  ee:	af 91       	pop	r26
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:
ISR(INT1_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
	PORTD |= (1<<6);
 110:	96 9a       	sbi	0x12, 6	; 18
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	99 e6       	ldi	r25, 0x69	; 105
 116:	a8 e1       	ldi	r26, 0x18	; 24
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	a0 40       	sbci	r26, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_2+0x1a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_2+0x24>
 122:	00 00       	nop
	_delay_ms(1000);
}
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_3>:
ISR(INT2_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	PORTD |= (1<<7);
 148:	97 9a       	sbi	0x12, 7	; 18
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	99 e6       	ldi	r25, 0x69	; 105
 14e:	a8 e1       	ldi	r26, 0x18	; 24
 150:	81 50       	subi	r24, 0x01	; 1
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	a0 40       	sbci	r26, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_3+0x1a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_3+0x24>
 15a:	00 00       	nop
	_delay_ms(1000);
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
